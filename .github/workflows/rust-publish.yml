# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Rust Publish

on:
  release:
    types:
      - released
  pull_request:
    paths:
      - .github/workflows/rust-publish.yml
  workflow_dispatch:
    inputs:
      mode:
        description: "dry_run: build & test only, release: build & publish to crates.io"
        required: true
        default: "dry_run"
        type: choice
        options:
          - dry_run
          - release

env:
  # This env var is used by Swatinem/rust-cache@v2 for the cache
  # key, so we set it to make sure it is always consistent.
  CARGO_TERM_COLOR: always
  # Disable full debug symbol generation to speed up CI build and keep memory down
  # "1" means line tables only, which is useful for panic tracebacks.
  RUSTFLAGS: "-C debuginfo=1"
  RUST_BACKTRACE: "1"
  # according to: https://matklad.github.io/2021/09/04/fast-rust-builds.html
  # CI builds are faster with incremental disabled.
  CARGO_INCREMENTAL: "0"
  CARGO_BUILD_JOBS: "1"

jobs:
  publish:
    runs-on: ubuntu-24.04
    timeout-minutes: 60
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y protobuf-compiler libssl-dev
      # pin the toolchain version to avoid surprises
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
      - uses: rui314/setup-mold@v1
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: rust
      - uses: katyo/publish-crates@v2
        with:
          # registry-token: ${{ steps.auth.outputs.token }}
          registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}
          args: "--all-features"
          path: rust
          dry-run: ${{ github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.mode == 'dry_run') }}