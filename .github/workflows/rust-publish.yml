# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Rust Publish

on:
  release:
    types:
      - released
  pull_request:
    paths:
      - .github/workflows/rust-publish.yml
  workflow_dispatch:
    inputs:
      mode:
        description: "dry_run: build & test only, release: build & publish to crates.io"
        required: true
        default: "dry_run"
        type: choice
        options:
          - dry_run
          - release

env:
  # This env var is used by Swatinem/rust-cache@v2 for the cache
  # key, so we set it to make sure it is always consistent.
  CARGO_TERM_COLOR: always
  # Disable full debug symbol generation to speed up CI build and keep memory down
  # "1" means line tables only, which is useful for panic tracebacks.
  RUSTFLAGS: "-C debuginfo=1"
  RUST_BACKTRACE: "1"
  # according to: https://matklad.github.io/2021/09/04/fast-rust-builds.html
  # CI builds are faster with incremental disabled.
  CARGO_INCREMENTAL: "0"
  CARGO_BUILD_JOBS: "1"

jobs:
  publish:
    runs-on: ubuntu-24.04
    timeout-minutes: 60
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y protobuf-compiler libssl-dev

      # pin the toolchain version to avoid surprises
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - uses: rui314/setup-mold@v1

      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: rust

      - name: Set up Python for code generation
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv and openapi-generator-cli
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          $HOME/.local/bin/uv tool install openapi-generator-cli

      - name: Generate auto-generated Rust client
        working-directory: rust
        run: |
          make gen-reqwest-client

      - name: Get package versions
        id: get_versions
        run: |
          # Get reqwest-client version
          REQWEST_VERSION=$(grep "^version = " rust/lance-namespace-reqwest-client/Cargo.toml | cut -d'"' -f2)
          echo "reqwest_version=$REQWEST_VERSION" >> $GITHUB_OUTPUT
          
          # Get lance-namespace version
          NS_VERSION=$(grep "^version = " rust/lance-namespace/Cargo.toml | cut -d'"' -f2)
          echo "ns_version=$NS_VERSION" >> $GITHUB_OUTPUT
          
          echo "lance-namespace-reqwest-client version: $REQWEST_VERSION"
          echo "lance-namespace version: $NS_VERSION"

      - name: Dry run - check publishability
        if: |
          github.event_name == 'pull_request' ||
          (github.event_name == 'workflow_dispatch' && github.event.inputs.mode == 'dry_run')
        run: |
          cd rust
          
          # Check lance-namespace-reqwest-client
          cd lance-namespace-reqwest-client
          cargo publish --dry-run
          cd ..
          
          # Check lance-namespace
          cd lance-namespace
          cargo publish --dry-run
          cd ..
          
          echo "✅ Dry run successful - packages are ready to publish"

      - name: Publish lance-namespace-reqwest-client to crates.io
        if: |
          (github.event_name == 'release' && github.event.action == 'released') ||
          (github.event_name == 'workflow_dispatch' && github.event.inputs.mode == 'release')
        working-directory: rust/lance-namespace-reqwest-client
        run: |
          cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}
          echo "✅ Successfully published lance-namespace-reqwest-client version ${{ steps.get_versions.outputs.reqwest_version }} to crates.io!"
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}

      - name: Wait for dependency availability
        if: |
          (github.event_name == 'release' && github.event.action == 'released') ||
          (github.event_name == 'workflow_dispatch' && github.event.inputs.mode == 'release')
        run: |
          echo "Waiting for lance-namespace-reqwest-client to be available on crates.io..."
          sleep 60

      - name: Publish lance-namespace to crates.io
        if: |
          (github.event_name == 'release' && github.event.action == 'released') ||
          (github.event_name == 'workflow_dispatch' && github.event.inputs.mode == 'release')
        working-directory: rust/lance-namespace
        run: |
          cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}
          echo "✅ Successfully published lance-namespace version ${{ steps.get_versions.outputs.ns_version }} to crates.io!"
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}

      - name: Verify crates.io availability
        if: |
          (github.event_name == 'release' && github.event.action == 'released') ||
          (github.event_name == 'workflow_dispatch' && github.event.inputs.mode == 'release')
        run: |
          echo "Packages published to crates.io!"
          echo ""
          echo "Users can add the following to their Cargo.toml:"
          echo ""
          echo "[dependencies]"
          echo "lance-namespace = \"${{ steps.get_versions.outputs.ns_version }}\""
          echo "lance-namespace-reqwest-client = \"${{ steps.get_versions.outputs.reqwest_version }}\""
          echo ""
          echo "View on crates.io:"
          echo "- https://crates.io/crates/lance-namespace"
          echo "- https://crates.io/crates/lance-namespace-reqwest-client"