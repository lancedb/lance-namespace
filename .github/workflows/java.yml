# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Java

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - synchronize
      - ready_for_review
      - reopened
    paths:
      - docs/src/spec/**
      - java/**
      - .github/workflows/java.yml

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

env:
  # This env var is used by Swatinem/rust-cache@v2 for the cache
  # key, so we set it to make sure it is always consistent.
  CARGO_TERM_COLOR: always
  # Disable full debug symbol generation to speed up CI build and keep memory down
  # "1" means line tables only, which is useful for panic tracebacks.
  RUSTFLAGS: "-C debuginfo=1"
  RUST_BACKTRACE: "1"
  # according to: https://matklad.github.io/2021/09/04/fast-rust-builds.html
  # CI builds are faster with incremental disabled.
  CARGO_INCREMENTAL: "0"
  CARGO_BUILD_JOBS: "1"

jobs:
  linux-build:
    runs-on: ubuntu-24.04
    timeout-minutes: 60
    strategy:
      matrix:
        java-version: [ 8, 11, 17 ]
    steps:
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y protobuf-compiler libssl-dev
      # pin the toolchain version to avoid surprises
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
      - uses: rui314/setup-mold@v1
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: Checkout lance repo
        uses: actions/checkout@v4
        with:
          repository: lancedb/lance
          path: lance
      - name: Checkout lance-namespace repo
        uses: actions/checkout@v4
        with:
          path: lance-namespace
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: lance/java/core/lance-jni -> ../target/rust-maven-plugin/lance-jni
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ matrix.java-version }}
          cache: "maven"
      - name: Install Lance Java SDK
        working-directory: lance/java
        run: |
          if [ "${{ matrix.java-version }}" == "17" ]; then
            export JAVA_TOOL_OPTIONS="$JAVA_TOOL_OPTIONS \
            -XX:+IgnoreUnrecognizedVMOptions \
            --add-opens=java.base/java.lang=ALL-UNNAMED \
            --add-opens=java.base/java.lang.invoke=ALL-UNNAMED \
            --add-opens=java.base/java.lang.reflect=ALL-UNNAMED \
            --add-opens=java.base/java.io=ALL-UNNAMED \
            --add-opens=java.base/java.net=ALL-UNNAMED \
            --add-opens=java.base/java.nio=ALL-UNNAMED \
            --add-opens=java.base/java.util=ALL-UNNAMED \
            --add-opens=java.base/java.util.concurrent=ALL-UNNAMED \
            --add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED \
            --add-opens=java.base/jdk.internal.ref=ALL-UNNAMED \
            --add-opens=java.base/sun.nio.ch=ALL-UNNAMED \
            --add-opens=java.base/sun.nio.cs=ALL-UNNAMED \
            --add-opens=java.base/sun.security.action=ALL-UNNAMED \
            --add-opens=java.base/sun.util.calendar=ALL-UNNAMED \
            --add-opens=java.security.jgss/sun.security.krb5=ALL-UNNAMED \
            -Djdk.reflect.useDirectMethodHandle=false \
            -Dio.netty.tryReflectionSetAccessible=true"
          fi
          mvn install -pl :lance-core -DskipTests -am
      - name: Check code style
        working-directory: lance-namespace/java
        run: |
          if [ "${{ matrix.java-version }}" == "17" ]; then
            export JAVA_TOOL_OPTIONS="$JAVA_TOOL_OPTIONS \
            -XX:+IgnoreUnrecognizedVMOptions \
            --add-opens=java.base/java.lang=ALL-UNNAMED \
            --add-opens=java.base/java.lang.invoke=ALL-UNNAMED \
            --add-opens=java.base/java.lang.reflect=ALL-UNNAMED \
            --add-opens=java.base/java.io=ALL-UNNAMED \
            --add-opens=java.base/java.net=ALL-UNNAMED \
            --add-opens=java.base/java.nio=ALL-UNNAMED \
            --add-opens=java.base/java.util=ALL-UNNAMED \
            --add-opens=java.base/java.util.concurrent=ALL-UNNAMED \
            --add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED \
            --add-opens=java.base/jdk.internal.ref=ALL-UNNAMED \
            --add-opens=java.base/sun.nio.ch=ALL-UNNAMED \
            --add-opens=java.base/sun.nio.cs=ALL-UNNAMED \
            --add-opens=java.base/sun.security.action=ALL-UNNAMED \
            --add-opens=java.base/sun.util.calendar=ALL-UNNAMED \
            --add-opens=java.security.jgss/sun.security.krb5=ALL-UNNAMED \
            -Djdk.reflect.useDirectMethodHandle=false \
            -Dio.netty.tryReflectionSetAccessible=true"
          fi
          mvn checkstyle:check spotless:check
      - name: Running tests with Java ${{ matrix.java-version }}
        working-directory: lance-namespace/java
        run: |
          if [ "${{ matrix.java-version }}" == "17" ]; then
            export JAVA_TOOL_OPTIONS="$JAVA_TOOL_OPTIONS \
            -XX:+IgnoreUnrecognizedVMOptions \
            --add-opens=java.base/java.lang=ALL-UNNAMED \
            --add-opens=java.base/java.lang.invoke=ALL-UNNAMED \
            --add-opens=java.base/java.lang.reflect=ALL-UNNAMED \
            --add-opens=java.base/java.io=ALL-UNNAMED \
            --add-opens=java.base/java.net=ALL-UNNAMED \
            --add-opens=java.base/java.nio=ALL-UNNAMED \
            --add-opens=java.base/java.util=ALL-UNNAMED \
            --add-opens=java.base/java.util.concurrent=ALL-UNNAMED \
            --add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED \
            --add-opens=java.base/jdk.internal.ref=ALL-UNNAMED \
            --add-opens=java.base/sun.nio.ch=ALL-UNNAMED \
            --add-opens=java.base/sun.nio.cs=ALL-UNNAMED \
            --add-opens=java.base/sun.security.action=ALL-UNNAMED \
            --add-opens=java.base/sun.util.calendar=ALL-UNNAMED \
            --add-opens=java.security.jgss/sun.security.krb5=ALL-UNNAMED \
            -Djdk.reflect.useDirectMethodHandle=false \
            -Dio.netty.tryReflectionSetAccessible=true"
          fi
          mvn install
