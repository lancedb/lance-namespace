# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
openapi: 3.1.1
info:
  title: Lance REST Namespace Specification
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1
  description: >
    This OpenAPI specification is a part of the Lance namespace specification. It contains 2 parts:
    
    The `components/schemas`, `components/responses`, `components/examples` sections define
    the request and response shape for each operation in a Lance Namespace across all implementations.
    See https://lancedb.github.io/lance-namespace/spec/operations for more details.
    
    The `servers`, `security`, `paths`, `components/parameters` sections are for the 
    Lance REST Namespace implementation, which defines a complete REST server that can work with Lance datasets.
    See https://lancedb.github.io/lance-namespace/spec/impls/rest for more details.
servers:
  - url: "{scheme}://{host}:{port}/{basePath}"
    description: Generic server URL with all parts configurable
    variables:
      scheme:
        default: http
      host:
        default: localhost
      port:
        default: "2333"
      basePath:
        default: ""
  - url: "{scheme}://{host}/{basePath}"
    description: Server URL when the port can be inferred from the scheme
    variables:
      scheme:
        default: http
      host:
        default: localhost
      basePath:
        default: ""

security:
  - OAuth2: []
  - BearerAuth: []

paths:
  /v1/namespace/{id}/create:
    parameters:
      - $ref: '#/components/parameters/id'
      - $ref: '#/components/parameters/delimiter'
    post:
      tags: [ Namespace ]
      summary: Create a new namespace
      operationId: CreateNamespace
      description: >
        Create a new namespace.
        
        A namespace can manage either a collection of child namespaces, or a collection of tables.

        There are three modes when trying to create a namespace,
        to differentiate the behavior when a namespace of the same name already exists:
          * CREATE: the operation fails with 400.
          * EXIST_OK: the operation succeeds and the existing namespace is kept.
          * OVERWRITE: the existing namespace is dropped and a new empty namespace with this name is created.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNamespaceRequest'
      responses:
        200:
          $ref: '#/components/responses/CreateNamespaceResponse'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          $ref: '#/components/responses/ForbiddenErrorResponse'
        406:
          $ref: '#/components/responses/UnsupportedOperationErrorResponse'
        409:
          $ref: '#/components/responses/ConflictErrorResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

  /v1/namespace/{id}/list:
    parameters:
      - $ref: '#/components/parameters/id'
      - $ref: '#/components/parameters/delimiter'
    post:
      tags: [ Namespace ]
      summary: List namespaces
      operationId: ListNamespaces
      description: >
        List all child namespace names of the root namespace or a given parent namespace.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListNamespacesRequest'
      responses:
        200:
          $ref: '#/components/responses/ListNamespacesResponse'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          $ref: '#/components/responses/ForbiddenErrorResponse'
        406:
          $ref: '#/components/responses/UnsupportedOperationErrorResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

  /v1/namespace/{id}/describe:
    parameters:
      - $ref: '#/components/parameters/id'
      - $ref: '#/components/parameters/delimiter'
    post:
      tags: [ Namespace ]
      summary: Describe information about a namespace
      operationId: DescribeNamespace
      description: >
        Return the detailed information for a given namespace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeNamespaceRequest'
      responses:
        200:
          $ref: '#/components/responses/DescribeNamespaceResponse'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          $ref: '#/components/responses/ForbiddenErrorResponse'
        404:
          $ref: '#/components/responses/NotFoundErrorResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

  /v1/namespace/{id}/drop:
    parameters:
      - $ref: '#/components/parameters/id'
      - $ref: '#/components/parameters/delimiter'
    post:
      tags: [ Namespace ]
      summary: Drop a namespace
      operationId: DropNamespace
      description: >
        Drop a namespace. The namespace must be empty.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DropNamespaceRequest'
      responses:
        200:
          $ref: '#/components/responses/DropNamespaceResponse'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          $ref: '#/components/responses/ForbiddenErrorResponse'
        404:
          $ref: '#/components/responses/NotFoundErrorResponse'
        409:
          $ref: '#/components/responses/ConflictErrorResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

  /v1/namespace/{id}/exists:
    parameters:
      - $ref: '#/components/parameters/id'
      - $ref: '#/components/parameters/delimiter'
    post:
      tags: [ Namespace ]
      summary: Check if a namespace exists
      operationId: NamespaceExists
      description: >
        Check if a namespace exists.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NamespaceExistsRequest'
      responses:
        200:
          $ref: '#/components/responses/NamespaceExistsResponse'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          $ref: '#/components/responses/ForbiddenErrorResponse'
        404:
          $ref: '#/components/responses/NotFoundErrorResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

  /v1/table/{id}/insert:
    parameters:
      - $ref: '#/components/parameters/id'
      - name: mode
        in: query
        description: 'Insert mode: "append" (default) or "overwrite"'
        required: false
        schema:
          type: string
          enum:
            - append
            - overwrite
          default: append
    post:
      tags: [ Table ]
      summary: Insert records into a table
      operationId: InsertTable
      description: >
        Insert new records into an existing table using Arrow IPC format.
        Supports both lance-namespace format (with namespace in body) and LanceDB format (with database in headers).
      requestBody:
        description: Arrow IPC data
        content:
          application/x-arrow-ipc:
            schema:
              type: string
              format: binary
        required: true
      responses:
        200:
          $ref: '#/components/responses/InsertTableResponse'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          $ref: '#/components/responses/ForbiddenErrorResponse'
        404:
          $ref: '#/components/responses/NotFoundErrorResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

  /v1/table/{id}/merge_insert:
    parameters:
      - $ref: '#/components/parameters/id'
      - name: "on"
        in: query
        description: Column name to use for matching rows (required)
        required: true
        schema:
          type: string
      - name: "when_matched_update_all"
        in: query
        description: Update all columns when rows match
        required: false
        schema:
          type: boolean
          default: false
      - name: "when_not_matched_insert_all"
        in: query
        description: Insert all columns when rows don't match
        required: false
        schema:
          type: boolean
          default: false
    post:
      tags: [ Table ]
      summary: Merge insert (upsert) records into a table
      operationId: MergeInsertTable
      description: >
        Performs a merge insert (upsert) operation on a table. This operation updates existing rows
        based on a matching column and inserts new rows that don't match.
        Returns the number of rows inserted and updated.
      requestBody:
        description: Arrow IPC data containing the records to merge
        content:
          application/x-arrow-ipc:
            schema:
              type: string
              format: binary
        required: true
      responses:
        200:
          $ref: '#/components/responses/MergeInsertTableResponse'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          $ref: '#/components/responses/ForbiddenErrorResponse'
        404:
          $ref: '#/components/responses/NotFoundErrorResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

  /v1/table/{id}/update:
    parameters:
      - $ref: '#/components/parameters/id'
    post:
      tags: [ Table ]
      summary: Update rows in a table
      operationId: UpdateTable
      description: >
        Update existing rows in a table using SQL expressions.
        Each update consists of a column name and an SQL expression that will be
        evaluated against the current row's value. Optionally, a predicate can be
        provided to filter which rows to update.
      requestBody:
        description: Update request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTableRequest'
        required: true
      responses:
        200:
          description: Update successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateTableResponse'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          $ref: '#/components/responses/ForbiddenErrorResponse'
        404:
          $ref: '#/components/responses/NotFoundErrorResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

  /v1/table/{id}/delete:
    parameters:
      - $ref: '#/components/parameters/id'
    post:
      tags: [ Table ]
      summary: Delete rows from a table
      operationId: DeleteFromTable
      description: >
        Delete rows from a table based on a SQL predicate.
        Returns the number of rows that were deleted.
      requestBody:
        description: Delete request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteFromTableRequest'
        required: true
      responses:
        200:
          description: Delete successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteFromTableResponse'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          $ref: '#/components/responses/ForbiddenErrorResponse'
        404:
          $ref: '#/components/responses/NotFoundErrorResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

  /v1/table/{id}/query:
    parameters:
      - $ref: '#/components/parameters/id'
    post:
      tags: [ Table ]
      summary: Query a table
      operationId: QueryTable
      description: >
        Query a table with vector search and optional filtering.
        Returns results in Arrow IPC stream format.
      requestBody:
        description: Query request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
        required: true
      responses:
        200:
          description: Query results in Arrow IPC stream format
          content:
            application/vnd.apache.arrow.stream:
              schema:
                type: string
                format: binary
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          $ref: '#/components/responses/ForbiddenErrorResponse'
        404:
          $ref: '#/components/responses/NotFoundErrorResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

  /v1/table/{id}/create_index:
    parameters:
      - $ref: '#/components/parameters/id'
    post:
      tags: [ Table ]
      summary: Create an index on a table
      operationId: CreateIndex
      description: >
        Create an index on a table column for faster search operations.
        Supports vector indexes (IVF_FLAT, IVF_HNSW_SQ, IVF_PQ) and scalar indexes.
      requestBody:
        description: Index creation request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIndexRequest'
        required: true
      responses:
        200:
          description: Index created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateIndexResponse'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          $ref: '#/components/responses/ForbiddenErrorResponse'
        404:
          $ref: '#/components/responses/NotFoundErrorResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

  /v1/table/{id}/create_scalar_index:
    parameters:
      - $ref: '#/components/parameters/id'
    post:
      tags: [ Table ]
      summary: Create a scalar index on a table
      operationId: CreateScalarIndex
      description: >
        Create a scalar index on a table column for faster search operations.
        Supports scalar indexes (BTREE, BITMAP, LABEL_LIST).
      requestBody:
        description: Scalar index creation request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIndexRequest'
        required: true
      responses:
        200:
          description: Scalar index created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateIndexResponse'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          $ref: '#/components/responses/ForbiddenErrorResponse'
        404:
          $ref: '#/components/responses/NotFoundErrorResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

  /v1/table/{id}/index/list:
    parameters:
      - $ref: '#/components/parameters/id'
    post:
      tags: [ Table ]
      summary: List indices on a table
      operationId: ListIndices
      description: >
        List all indices created on a table. Returns information about each index
        including name, columns, status, and UUID.
      requestBody:
        description: Index list request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IndexListRequest'
        required: true
      responses:
        200:
          description: List of indices on the table
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexListResponse'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          $ref: '#/components/responses/ForbiddenErrorResponse'
        404:
          $ref: '#/components/responses/NotFoundErrorResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
  /v1/table/{id}/index/{index_name}/stats:
    parameters:
      - $ref: '#/components/parameters/id'
      - name: index_name
        in: path
        description: Name of the index to get stats for
        required: true
        schema:
          type: string
    post:
      tags: [ Table ]
      summary: Get index statistics
      operationId: GetIndexStats
      description: >
        Get statistics for a specific index on a table. Returns information about
        the index type, distance type (for vector indices), and row counts.
      requestBody:
        description: Index stats request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IndexStatsRequest'
        required: true
      responses:
        200:
          description: Index statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexStatsResponse'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          $ref: '#/components/responses/ForbiddenErrorResponse'
        404:
          $ref: '#/components/responses/NotFoundErrorResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

  /v1/table/{id}/register:
    parameters:
      - $ref: '#/components/parameters/id'
      - $ref: '#/components/parameters/delimiter'
    post:
      tags: [ Table ]
      summary: Register a table to a namespace
      operationId: RegisterTable
      description: >
        Register an existing table at a given storage location to a namespace.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterTableRequest'
      responses:
        200:
          $ref: '#/components/responses/RegisterTableResponse'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          $ref: '#/components/responses/ForbiddenErrorResponse'
        406:
          $ref: '#/components/responses/UnsupportedOperationErrorResponse'
        409:
          $ref: '#/components/responses/ConflictErrorResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

  /v1/table/{id}/list:
    parameters:
      - $ref: '#/components/parameters/id'
      - $ref: '#/components/parameters/delimiter'
    post:
      tags: [ Table ]
      summary: List tables
      operationId: ListTables
      description: >
        List all child table names of the root namespace or a given parent namespace.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListTablesRequest'
      responses:
        200:
          $ref: '#/components/responses/ListTablesResponse'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          $ref: '#/components/responses/ForbiddenErrorResponse'
        406:
          $ref: '#/components/responses/UnsupportedOperationErrorResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

  /v1/table/{id}/describe:
    parameters:
      - $ref: '#/components/parameters/id'
      - $ref: '#/components/parameters/delimiter'
    post:
      tags: [ Table ]
      summary: Describe a table from the namespace
      operationId: DescribeTable
      description: >
        Get a table's detailed information under a specified namespace.
        Supports both lance-namespace format (with namespace in body) and LanceDB format (with database in headers).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeTableRequest'
      responses:
        200:
          $ref: '#/components/responses/DescribeTableResponse'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          $ref: '#/components/responses/ForbiddenErrorResponse'
        404:
          $ref: '#/components/responses/NotFoundErrorResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

  /v2/table/{id}/describe:
    parameters:
      - $ref: '#/components/parameters/id'
      - $ref: '#/components/parameters/delimiter'
    post:
      tags: [ Table ]
      summary: Describe a table from the namespace
      operationId: DescribeTableV2
      description: >
        Get a table's detailed information under a specified namespace.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeTableRequestV2'
      responses:
        200:
          $ref: '#/components/responses/DescribeTableResponseV2'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          $ref: '#/components/responses/ForbiddenErrorResponse'
        404:
          $ref: '#/components/responses/NotFoundErrorResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

  /v1/table/{id}/count_rows:
    parameters:
      - $ref: '#/components/parameters/id'
      - $ref: '#/components/parameters/delimiter'
    post:
      tags: [ Table ]
      summary: Count rows in a table
      operationId: CountRows
      description: >
        Count the number of rows in a table.
        Supports both lance-namespace format (with namespace in body) and LanceDB format (with database in headers).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CountRowsRequest'
      responses:
        200:
          $ref: '#/components/responses/CountRowsResponse'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          $ref: '#/components/responses/ForbiddenErrorResponse'
        404:
          $ref: '#/components/responses/NotFoundErrorResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

  /v1/table/{id}/exists:
    parameters:
      - $ref: '#/components/parameters/id'
      - $ref: '#/components/parameters/delimiter'
    post:
      tags: [ Table ]
      summary: Check if a table exists
      operationId: TableExists
      description: >
        Check if a table exists.
        
        This API should behave exactly like the GetTable API, except it does not contain a body.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TableExistsRequest'
      responses:
        200:
          $ref: '#/components/responses/TableExistsResponse'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          $ref: '#/components/responses/ForbiddenErrorResponse'
        404:
          $ref: '#/components/responses/NotFoundErrorResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

  /v1/transaction/{id}/describe:
    parameters:
      - $ref: '#/components/parameters/id'
      - $ref: '#/components/parameters/delimiter'
    post:
      tags: [ Transaction ]
      summary: Describe information about a transaction
      operationId: DescribeTransaction
      description: Return a detailed information for a given transaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeTransactionRequest'
      responses:
        200:
          $ref: '#/components/responses/DescribeTransactionResponse'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          $ref: '#/components/responses/ForbiddenErrorResponse'
        404:
          $ref: '#/components/responses/NotFoundErrorResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

  /v1/transaction/{id}/alter:
    parameters:
      - $ref: '#/components/parameters/id'
      - $ref: '#/components/parameters/delimiter'
    post:
      tags: [ Transaction ]
      summary: Alter information of a transaction.
      operationId: AlterTransaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlterTransactionRequest'
      responses:
        200:
          $ref: '#/components/responses/AlterTransactionResponse'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          $ref: '#/components/responses/ForbiddenErrorResponse'
        404:
          $ref: '#/components/responses/NotFoundErrorResponse'
        409:
          $ref: '#/components/responses/ConflictErrorResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

  /v1/table/{id}/drop:
    parameters:
      - $ref: '#/components/parameters/id'
      - $ref: '#/components/parameters/delimiter'
    post:
      tags: [ Table ]
      summary: Drop a table from its namespace
      operationId: DropTable
      description: >
        Drop a table from its namespace and delete its data.
        If the table and its data can be immediately deleted, return information of the deleted table.
        Otherwise, return a transaction ID that client can use to track deletion progress.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DropTableRequest'
      responses:
        200:
          $ref: '#/components/responses/DropTableResponse'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          $ref: '#/components/responses/ForbiddenErrorResponse'
        404:
          $ref: '#/components/responses/NotFoundErrorResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

  /v1/table/{id}/deregister:
    parameters:
      - $ref: '#/components/parameters/id'
      - $ref: '#/components/parameters/delimiter'
    post:
      tags: [ Table ]
      summary: Deregister a table from its namespace
      operationId: DeregisterTable
      description: >
        Deregister a table from its namespace. The table content remains available in the storage.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeregisterTableRequest'
      responses:
        200:
          $ref: '#/components/responses/DeregisterTableResponse'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          $ref: '#/components/responses/ForbiddenErrorResponse'
        404:
          $ref: '#/components/responses/NotFoundErrorResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

  /v1/table/{id}/create:
    parameters:
      - $ref: '#/components/parameters/id'
    post:
      tags: [ Table ]
      summary: Create a table with the given name
      operationId: CreateTable
      description: >
        Create a new table in the namespace.
        Supports both lance-namespace format (with namespace in body) and LanceDB format (with database in headers).
      requestBody:
        description: Arrow IPC data
        content:
          application/x-arrow-ipc:
            schema:
              type: string
              format: binary
        required: true
      responses:
        200:
          $ref: '#/components/responses/CreateTableResponse'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          $ref: '#/components/responses/ForbiddenErrorResponse'
        404:
          $ref: '#/components/responses/NotFoundErrorResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

components:
  parameters:
    id:
      name: id
      description: >
        `string identifier` of an object in a namespace, following the Lance Namespace spec.
        When the value is equal to the delimiter, it represents the root namespace.
        For example, `v1/namespace/./list` performs a `ListNamespace` on the root namespace.
      in: path
      required: true
      schema:
        type: string
    delimiter:
      name: delimiter
      description: >
        An optional delimiter of the `string identifier`, following the Lance Namespace spec.
        When not specified, the `.` delimiter must be used.
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/PageToken'
  schemas:
    ErrorResponse:
      type: object
      description: JSON error response model based on [RFC-7807](https://datatracker.ietf.org/doc/html/rfc7807)
      required:
        - type
      properties:
        type:
          type: string
          description: a URI identifier that categorizes the error
          example: /errors/incorrect-user-pass
        title:
          type: string
          description: a brief, human-readable message about the error
          example: Incorrect username or password
        status:
          type: integer
          minimum: 400
          maximum: 600
          description: HTTP response code, (if present) it must match the actual HTTP code returned by the service
          example: 404
        detail:
          type: string
          description: a human-readable explanation of the error
          example: Authentication failed due to incorrect username or password
        instance:
          type: string
          description: a URI that identifies the specific occurrence of the error
          example: /login/log/abc123

    CreateNamespaceRequest:
      type: object
      required:
        - name
        - mode
      properties:
        name:
          type: string
        parent:
          type: array
          items:
            type: string
        mode:
          type: string
          enum:
            - CREATE
            - EXIST_OK
            - OVERWRITE
        options:
          type: object
          additionalProperties:
            type: string

    CreateNamespaceResponse:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        parent:
          type: array
          items:
            type: string
        properties:
          type: object
          additionalProperties:
            type: string

    ListNamespacesRequest:
      type: object
      properties:
        parent:
          type: array
          items:
            type: string
        pageToken:
          $ref: "#/components/schemas/PageToken"
        pageSize:
          $ref: "#/components/schemas/PageSize"

    ListNamespacesResponse:
      type: object
      required:
        - namespaces
      properties:
        namespaces:
          type: array
          uniqueItems: true
          items:
            type: string
            example: "accounting"
        nextPageToken:
          $ref: "#/components/schemas/PageToken"

    DescribeNamespaceRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        parent:
          type: array
          items:
            type: string

    DescribeNamespaceResponse:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        parent:
          type: array
          items:
            type: string
        properties:
          type: object
          description:
            Properties stored on the namespace, if supported by the server.
            If the server does not support namespace properties, it should return null for this field.
            If namespace properties are supported, but none are set, it should return an empty object.
          additionalProperties:
            type: string
          example: { "owner": "Ralph", 'created_at': '1452120468' }
          default: { }
          nullable: true

    DropNamespaceRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        parent:
          type: array
          items:
            type: string
        mode:
          type: string
          description: >
            The mode for dropping a namespace, deciding the server behavior when the namespace to drop is not found.
            - FAIL (default): the server must return 400 indicating the namespace to drop does not exist.
            - SKIP: the server must return 204 indicating the drop operation has succeeded.
          enum:
            - SKIP
            - FAIL
        behavior:
          type: string
          description: >
            The behavior for dropping a namespace.
            - RESTRICT (default): the namespace should not contain any table or child namespace when drop is initiated.
                If tables are found, the server should return error and not drop the namespace.
            - CASCADE: all tables and child namespaces in the namespace are dropped before the namespace is dropped.
          enum:
            - RESTRICT
            - CASCADE

    DropNamespaceResponse:
      type: object
      properties:
        name:
          type: string
        parent:
          type: array
          items:
            type: string
        properties:
          type: object
          additionalProperties:
            type: string
        transactionId:
          description: >
            If present, indicating the operation is long running and should be tracked using GetTransaction
          type: string

    NamespaceExistsRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        parent:
          type: array
          items:
            type: string

    NamespaceExistsResponse:
      type: object
      required:
        - exists
      properties:
        exists:
          type: boolean

    PageToken:
      description:
        An opaque token that allows pagination for list APIs (e.g. ListNamespaces).
        
        For an initial client request for a list API, if the server cannot return all items in one response,
        or if there are more items than the `pageSize` specified in the client request,
        the server must return a `nextPageToken` in the response indicating there are more results available.
        
        After the initial request, the value of `nextPageToken` from each response must be used by the client
        as the `pageToken` parameter value for the next request.
        
        Clients must interpret either `null`, missing value or empty string value of `nextPageToken` from
        a server response as the end of the listing results.
      type: string
      nullable: true

    PageSize:
      description: An inclusive upper bound of the number of results that a client will receive.
      type: integer
      nullable: true

    RegisterTableRequest:
      type: object
      required:
        - name
        - namespace
        - location
      properties:
        name:
          type: string
        namespace:
          type: array
          items:
            type: string
        location:
          type: string

    RegisterTableResponse:
      type: object
      required:
        - name
        - namespace
        - location
      properties:
        name:
          type: string
        namespace:
          type: array
          items:
            type: string
        location:
          type: string
        properties:
          type: object
          additionalProperties:
            type: string

    ListTablesRequest:
      type: object
      properties:
        parent:
          type: array
          items:
            type: string
        pageToken:
          $ref: "#/components/schemas/PageToken"
        pageSize:
          $ref: "#/components/schemas/PageSize"

    ListTablesResponse:
      type: object
      required:
        - tables
      properties:
        tables:
          type: array
          uniqueItems: true
          items:
            type: string
            example: "cart"
        nextPageToken:
          $ref: "#/components/schemas/PageToken"

    DescribeTableRequest:
      type: object
      properties:
        name:
          type: string
        namespace:
          type: array
          items:
            type: string

        version:
          type:
          - integer
          - 'null'
          format: int64
          minimum: 0

    DescribeTableResponse:
      type: object
      required:
        - name
        - namespace
        - location
        - table
        - version
        - schema
        - stats
      properties:
        name:
          type: string
        namespace:
          type: array
          items:
            type: string
        location:
          type: string
        properties:
          type: object
          additionalProperties:
            type: string
        schema:
          $ref: '#/components/schemas/JsonSchema'
        stats:
          $ref: '#/components/schemas/TableBasicStats'
        table:
          type: string
        table_uri:
          type:
          - string
          - 'null'
          description: Table URI, optional
        version:
          type: integer
          format: int64
          minimum: 0

    DescribeTableRequestV2:
      type: object
      required:
        - name
        - namespace
      properties:
        name:
          type: string
        namespace:
          type: array
          items:
            type: string

    DescribeTableResponseV2:
      type: object
      required:
        - name
        - namespace
        - location
      properties:
        name:
          type: string
        namespace:
          type: array
          items:
            type: string
        location:
          type: string
        properties:
          type: object
          additionalProperties:
            type: string

    CountRowsRequest:
      type: object
      properties:
        name:
          type: string
        namespace:
          type: array
          items:
            type: string

    CountRowsResponse:
      type: integer
      format: int64
      description: Response containing the count of rows. Serializes transparently as just the number for backward compatibility.
      minimum: 0
    InsertTableResponse:
      type: object
      description: Response from inserting records into a table
      properties:
        version:
          type: integer
          format: int64
          description: The version of the table after the insert
          minimum: 0

    MergeInsertTableRequest:
      type: object
      required:
        - name
        - namespace
      properties:
        name:
          type: string
          description: The table name
        namespace:
          type: array
          items:
            type: string
          description: The namespace identifier

    MergeInsertTableResponse:
      type: object
      description: Response from merge insert operation
      properties:
        num_updated_rows:
          type: integer
          format: int64
          description: Number of rows updated
          minimum: 0
        num_inserted_rows:
          type: integer
          format: int64
          description: Number of rows inserted
          minimum: 0
        num_deleted_rows:
          type: integer
          format: int64
          description: Number of rows deleted (typically 0 for merge insert)
          minimum: 0
        version:
          type: integer
          format: int64
          description: The commit version associated with the operation
          minimum: 0

    UpdateTableRequest:
      type: object
      required:
        - name
        - namespace
        - updates
      properties:
        name:
          type: string
          description: The table name
        namespace:
          type: array
          items:
            type: string
          description: The namespace identifier
        predicate:
          type: string
          nullable: true
          description: Optional SQL predicate to filter rows for update
        updates:
          type: array
          items:
            type: array
            minItems: 2
            maxItems: 2
            items:
              type: string
          description: List of column updates as [column_name, expression] pairs

    UpdateTableResponse:
      type: object
      required:
        - updated_rows
        - version
      properties:
        updated_rows:
          type: integer
          format: int64
          description: Number of rows updated
          minimum: 0
        version:
          type: integer
          format: int64
          description: The commit version associated with the operation
          minimum: 0

    DeleteFromTableRequest:
      type: object
      required:
        - name
        - namespace
        - predicate
      properties:
        name:
          type: string
          description: The table name
        namespace:
          type: array
          items:
            type: string
          description: The namespace identifier
        predicate:
          type: string
          description: SQL predicate to filter rows for deletion

    DeleteFromTableResponse:
      type: object
      required:
        - version
      properties:
        version:
          type: integer
          format: int64
          description: The commit version associated with the operation
          minimum: 0

    QueryRequest:
      type: object
      required:
        - name
        - namespace
        - vector
        - k
      properties:
        name:
          type: string
        namespace:
          type: array
          items:
            type: string
        vector:
          type: array
          items:
            type: number
            format: float
          description: Query vector for similarity search
        k:
          type: integer
          minimum: 1
          description: Number of results to return
        filter:
          type: string
          description: Optional SQL filter expression
        columns:
          type: array
          items:
            type: string
          description: Optional list of columns to return
        distance_type:
          type: string
          enum: ["l2", "cosine", "dot"]
          description: Distance metric to use
        prefilter:
          type: boolean
          description: Whether to apply filtering before vector search
        bypass_vector_index:
          type: boolean
          description: Whether to bypass vector index
        ef:
          type: integer
          minimum: 1
          description: Search effort parameter for HNSW index
        nprobes:
          type: integer
          minimum: 1
          description: Number of probes for IVF index
        refine_factor:
          type: integer
          minimum: 1
          description: Refine factor for search
        with_row_id:
          type: boolean
          description: Whether to include row ID in results
        offset:
          type: integer
          minimum: 0
          description: Number of results to skip
        version:
          type: integer
          format: int64
          minimum: 0
          description: Table version to query

    CreateIndexRequest:
      type: object
      required:
        - name
        - namespace
        - column
        - index_type
      properties:
        name:
          type: string
          description: The table name
        namespace:
          type: array
          items:
            type: string
          description: The namespace identifier
        column:
          type: string
          description: Name of the column to create index on
        index_type:
          type: string
          enum: ["BTREE", "BITMAP", "LABEL_LIST", "IVF_FLAT", "IVF_HNSW_SQ", "IVF_PQ", "FTS"]
          description: Type of index to create
        metric_type:
          type: string
          enum: ["l2", "cosine", "dot"]
          description: Distance metric type for vector indexes
        num_partitions:
          type: integer
          minimum: 1
          description: Number of partitions for IVF indexes
        num_sub_vectors:
          type: integer
          minimum: 1
          description: Number of sub-vectors for PQ indexes
        num_bits:
          type: integer
          minimum: 1
          maximum: 8
          description: Number of bits for scalar quantization
        max_iterations:
          type: integer
          minimum: 1
          description: Maximum iterations for index building
        sample_rate:
          type: integer
          minimum: 1
          description: Sample rate for index building

    CreateIndexResponse:
      type: object
      required:
        - name
        - namespace
        - location
      properties:
        name:
          type: string
          description: The table name
        namespace:
          type: array
          items:
            type: string
          description: The namespace identifier
        location:
          type: string
          description: Table location (usually empty)
        properties:
          type: object
          additionalProperties:
            type: string
          description: Additional properties (usually empty)

    IndexListRequest:
      type: object
      required:
        - name
        - namespace
      properties:
        name:
          type: string
          description: The table name
        namespace:
          type: array
          items:
            type: string
          description: The namespace identifier
        version:
          type: integer
          format: int64
          minimum: 0
          nullable: true
          description: Optional table version to list indexes from

    IndexListResponse:
      type: object
      required:
        - name
        - namespace
        - location
        - indexes
      properties:
        name:
          type: string
          description: The table name
        namespace:
          type: array
          items:
            type: string
          description: The namespace identifier
        location:
          type: string
          description: Table location (usually empty)
        properties:
          type: object
          additionalProperties:
            type: string
          description: Additional properties (usually empty)
        indexes:
          type: array
          items:
            $ref: '#/components/schemas/IndexListItemResponse'
          description: List of indexes on the table

    IndexListItemResponse:
      type: object
      required:
        - index_name
        - index_uuid
        - columns
        - status
      properties:
        index_name:
          type: string
          description: Name of the index
        index_uuid:
          type: string
          description: Unique identifier for the index
        columns:
          type: array
          items:
            type: string
          description: Columns covered by this index
        status:
          type: string
          description: Current status of the index

    IndexStatsRequest:
      type: object
      required:
        - name
        - namespace
      properties:
        name:
          type: string
          description: The table name
        namespace:
          type: array
          items:
            type: string
          description: The namespace identifier
        version:
          type: integer
          format: int64
          minimum: 0
          nullable: true
          description: Optional table version to get stats for

    IndexStatsResponse:
      type: object
      properties:
        distance_type:
          type: string
          nullable: true
          description: Distance type for vector indexes
        index_type:
          type: string
          nullable: true
          description: Type of the index
        num_indexed_rows:
          type: integer
          format: int64
          minimum: 0
          nullable: true
          description: Number of indexed rows
        num_unindexed_rows:
          type: integer
          format: int64
          minimum: 0
          nullable: true
          description: Number of unindexed rows

    JsonSchema:
      type: object
      description: JSON representation of a Apache Arrow [Schema].
      required:
      - fields
      properties:
        fields:
          type: array
          items:
            $ref: '#/components/schemas/JsonField'
        metadata:
          type:
          - object
          - 'null'
          additionalProperties:
            type: string
          propertyNames:
            type: string
    JsonField:
      type: object
      description: JSON representation of an Apache Arrow [Field].
      required:
      - name
      - type
      - nullable
      properties:
        metadata:
          type:
          - object
          - 'null'
          additionalProperties:
            type: string
          propertyNames:
            type: string
        name:
          type: string
        nullable:
          type: boolean
        type:
          $ref: '#/components/schemas/JsonDataType'
    JsonDataType:
      type: object
      description: JSON representation of an Apache Arrow [DataType].
      required:
      - type
      properties:
        fields:
          type: object
        length:
          type:
          - integer
          - 'null'
          minimum: 0
        type:
          type: string

    Binary:
      type: string
      format: binary

    CreateTableResponse:
      type: object
      required:
        - name
        - namespace
        - location
      properties:
        name:
          type: string
        namespace:
          type: array
          items:
            type: string
        location:
          type: string
        properties:
          type: object
          additionalProperties:
            type: string

    TableExistsRequest:
      type: object
      required:
        - name
        - namespace
      properties:
        name:
          type: string
        namespace:
          type: array
          items:
            type: string

    TableExistsResponse:
      type: object
      required:
        - exists
      properties:
        exists:
          type: boolean

    TransactionStatus:
      type: string
      enum:
        - QUEUED
        - RUNNING
        - SUCCEEDED
        - FAILED
        - CANCELED

    DescribeTransactionRequest:
      type: object
      required:
        - id
      properties:
        id:
          type: string

    DescribeTransactionResponse:
      type: object
      required:
        - id
        - status
      properties:
        id:
          type: string
        status:
          $ref: '#/components/schemas/TransactionStatus'
        properties:
          type: object
          additionalProperties:
            type: string

    AlterTransactionSetStatus:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/TransactionStatus'

    AlterTransactionSetProperty:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
        mode:
          $ref: '#/components/schemas/SetPropertyMode'

    SetPropertyMode:
      type: string
      description: >
        The behavior if the property key already exists.
        - OVERWRITE (default): overwrite the existing value with the provided value
        - FAIL: fail the entire operation
        - SKIP: keep the existing value and skip setting the provided value
      enum:
        - OVERWRITE
        - FAIL
        - SKIP

    AlterTransactionUnsetProperty:
      type: object
      properties:
        key:
          type: string
        mode:
          $ref: '#/components/schemas/UnsetPropertyMode'

    UnsetPropertyMode:
      type: string
      description: >
        The behavior if the property key to unset does not exist.
        - SKIP (default): skip the property to unset
        - FAIL: fail the entire operation
      enum:
        - SKIP
        - FAIL

    AlterTransactionAction:
      type: object
      description: >
        A single action that could be performed to alter a transaction.
        This action holds the model definition for all types of specific actions models,
        this is to minimize difference and compatibility issue across codegen in different languages.
        When used, only one of the actions should be non-null for each action.
        If you would like to perform multiple actions, set a list of actions in the AlterTransactionRequest.
      properties:
        setStatusAction:
          $ref: '#/components/schemas/AlterTransactionSetStatus'
        setPropertyAction:
          $ref: '#/components/schemas/AlterTransactionSetProperty'
        unsetPropertyAction:
          $ref: '#/components/schemas/AlterTransactionUnsetProperty'

    AlterTransactionRequest:
      type: object
      description: >
        Alter a transaction with a list of actions.
        The server should either succeed and apply all actions, or fail and apply no action.
      required:
        - id
        - actions
      properties:
        id:
          type: string
        actions:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/AlterTransactionAction'

    AlterTransactionResponse:
      type: object
      required:
        - id
        - status
      properties:
        id:
          type: string
        status:
          $ref: '#/components/schemas/TransactionStatus'

    DropTableRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        namespace:
          type: array
          items:
            type: string

    DropTableResponse:
      type: object
      properties:
        name:
          type: string
        namespace:
          type: array
          items:
            type: string
        location:
          type: string
        properties:
          type: object
          additionalProperties:
            type: string
        transactionId:
          type: string

    DeregisterTableRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        namespace:
          type: array
          items:
            type: string

    DeregisterTableResponse:
      type: object
      properties:
        name:
          type: string
        namespace:
          type: array
          items:
            type: string
        location:
          type: string
        properties:
          type: object
          additionalProperties:
            type: string

    TableBasicStats:
      type: object
      required:
      - num_deleted_rows
      - num_fragments
      properties:
        num_deleted_rows:
          type: integer
          minimum: 0
        num_fragments:
          type: integer
          minimum: 0

  responses:
    ListNamespacesResponse:
      description: A list of namespaces
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ListNamespacesResponse'
          examples:
            NonEmptyResponse:
              $ref: '#/components/examples/ListNamespacesNonEmptyExample'
            EmptyResponse:
              $ref: '#/components/examples/ListNamespacesEmptyExample'

    DescribeNamespaceResponse:
      description:
        Returns a namespace, as well as any properties stored on the namespace if namespace properties
        are supported by the server.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DescribeNamespaceResponse'

    CreateNamespaceResponse:
      description:
        Result of creating a namespace
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateNamespaceResponse'

    DropNamespaceResponse:
      description:
        Result of dropping a namespace
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DropNamespaceResponse'

    NamespaceExistsResponse:
      description:
        Result of checking if a namespace exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NamespaceExistsResponse'

    ListTablesResponse:
      description: A list of tables
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ListTablesResponse'

    DescribeTableResponse:
      description: Table properties result when loading a table
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DescribeTableResponse'

    DescribeTableResponseV2:
      description: Table properties result when loading a table
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DescribeTableResponseV2'

    CountRowsResponse:
      description: Result of counting rows in a table
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CountRowsResponse'

    CreateTableResponse:
      description: Table properties result when creating a table
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateTableResponse'

    InsertTableResponse:
      description: Result of inserting records into a table
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InsertTableResponse'

    MergeInsertTableResponse:
      description: Result of merge insert operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MergeInsertTableResponse'

    RegisterTableResponse:
      description: Table properties result when registering a table
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RegisterTableResponse'

    TableExistsResponse:
      description:
        Result of checking if a table exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TableExistsResponse'

    DescribeTransactionResponse:
      description: Response of GetTransaction
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DescribeTransactionResponse'

    AlterTransactionResponse:
      description: Response of AlterTransaction
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AlterTransactionResponse'

    DropTableResponse:
      description:
        Response of DropTable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DropTableResponse'

    DeregisterTableResponse:
      description:
        Response of DeregisterTable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DeregisterTableResponse'

    # Error Responses

    BadRequestErrorResponse:
      description:
        Indicates a bad request error. It could be caused by an unexpected request
        body format or other forms of request validation failure, such as invalid json.
        Usually serves application/json content, although in some cases simple text/plain content might
        be returned by the server's middleware.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example: {
            "type": "/errors/bad-request",
            "title": "Malformed request",
            "status": 400,
            "detail": "",
            "instance": "/v1/namespaces"
          }

    UnauthorizedErrorResponse:
      description: Unauthorized. The request lacks valid authentication credentials for the operation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example: {
            "type": "/errors/unauthorized-request",
            "title": "No valid authentication credentials for the operation",
            "status": 401,
            "detail": "",
            "instance": "/v1/namespaces"
          }

    ForbiddenErrorResponse:
      description: Forbidden. Authenticated user does not have the necessary permissions.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example: {
            "type": "/errors/forbidden-request",
            "title": "Not authorized to make this request",
            "status": 403,
            "detail": "",
            "instance": "/v1/namespaces"
          }

    NotFoundErrorResponse:
      description:
        A server-side problem that means can not find the specified resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example: {
            "type": "/errors/not-found-error",
            "title": "Not found Error",
            "status": 404,
            "detail": "",
            "instance": "/v1/namespaces/{ns}"
          }

    UnsupportedOperationErrorResponse:
      description: Not Acceptable / Unsupported Operation. The server does not support this operation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example: {
            "type": "/errors/unsupported-operation",
            "title": "The server does not support this operation",
            "status": 406,
            "detail": "",
            "instance": "/v1/namespaces"
          }

    ConflictErrorResponse:
      description: The request conflicts with the current state of the target resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example: {
            "type": "/errors/conflict",
            "title": "The namespace has been concurrently modified",
            "status": 409,
            "detail": "",
            "instance": "/v1/namespaces/{ns}"
          }

    ServiceUnavailableErrorResponse:
      description:
        The service is not ready to handle the request. The client should wait and retry.
        The service may additionally send a Retry-After header to indicate when to retry.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example: {
            "type": "/errors/service-unavailable",
            "title": "Slow down",
            "status": 503,
            "detail": "",
            "instance": "/v1/namespaces"
          }

    ServerErrorResponse:
      description:
        A server-side problem that might not be addressable from the client
        side. Used for server 5xx errors without more specific documentation in
        individual routes.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example: {
            "type": "/errors/server-error",
            "title": "Internal Server Error",
            "status": 500,
            "detail": "",
            "instance": "/v1/namespaces"
          }

  examples:
    ListNamespacesEmptyExample:
      summary: An empty list of namespaces
      value: {
        "namespaces": [ ]
      }

    ListNamespacesNonEmptyExample:
      summary: A non-empty list of namespaces
      value: {
        "namespaces": [
          "accounting",
          "credits"
        ]
      }
