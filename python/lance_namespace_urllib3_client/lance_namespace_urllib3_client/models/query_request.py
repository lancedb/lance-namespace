# coding: utf-8

"""
    Lance REST Namespace Specification

    This OpenAPI specification is a part of the Lance namespace specification. It contains 2 parts: The `components/schemas`, `components/responses`, `components/examples` sections define the request and response shape for each operation in a Lance Namespace across all implementations. See https://lancedb.github.io/lance-namespace/spec/operations for more details. The `servers`, `security`, `paths`, `components/parameters` sections are for the  Lance REST Namespace implementation, which defines a complete REST server that can work with Lance datasets. See https://lancedb.github.io/lance-namespace/spec/impls/rest for more details. 

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class QueryRequest(BaseModel):
    """
    QueryRequest
    """ # noqa: E501
    name: StrictStr
    namespace: List[StrictStr]
    vector: List[Union[StrictFloat, StrictInt]] = Field(description="Query vector for similarity search")
    k: Annotated[int, Field(strict=True, ge=1)] = Field(description="Number of results to return")
    filter: Optional[StrictStr] = Field(default=None, description="Optional SQL filter expression")
    columns: Optional[List[StrictStr]] = Field(default=None, description="Optional list of columns to return")
    distance_type: Optional[StrictStr] = Field(default=None, description="Distance metric to use")
    prefilter: Optional[StrictBool] = Field(default=None, description="Whether to apply filtering before vector search")
    bypass_vector_index: Optional[StrictBool] = Field(default=None, description="Whether to bypass vector index")
    ef: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="Search effort parameter for HNSW index")
    nprobes: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="Number of probes for IVF index")
    refine_factor: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="Refine factor for search")
    with_row_id: Optional[StrictBool] = Field(default=None, description="Whether to include row ID in results")
    offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Number of results to skip")
    version: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Table version to query")
    __properties: ClassVar[List[str]] = ["name", "namespace", "vector", "k", "filter", "columns", "distance_type", "prefilter", "bypass_vector_index", "ef", "nprobes", "refine_factor", "with_row_id", "offset", "version"]

    @field_validator('distance_type')
    def distance_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['l2', 'cosine', 'dot']):
            raise ValueError("must be one of enum values ('l2', 'cosine', 'dot')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QueryRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QueryRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "namespace": obj.get("namespace"),
            "vector": obj.get("vector"),
            "k": obj.get("k"),
            "filter": obj.get("filter"),
            "columns": obj.get("columns"),
            "distance_type": obj.get("distance_type"),
            "prefilter": obj.get("prefilter"),
            "bypass_vector_index": obj.get("bypass_vector_index"),
            "ef": obj.get("ef"),
            "nprobes": obj.get("nprobes"),
            "refine_factor": obj.get("refine_factor"),
            "with_row_id": obj.get("with_row_id"),
            "offset": obj.get("offset"),
            "version": obj.get("version")
        })
        return _obj


