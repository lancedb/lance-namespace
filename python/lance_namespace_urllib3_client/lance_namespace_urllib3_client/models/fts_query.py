# coding: utf-8

"""
    Lance REST Namespace Specification

    This OpenAPI specification is a part of the Lance namespace specification. It contains 2 parts: The `components/schemas`, `components/responses`, `components/examples` sections define the request and response shape for each operation in a Lance Namespace across all implementations. See https://lancedb.github.io/lance-namespace/spec/operations for more details. The `servers`, `security`, `paths`, `components/parameters` sections are for the  Lance REST Namespace implementation, which defines a complete REST server that can work with Lance datasets. See https://lancedb.github.io/lance-namespace/spec/impls/rest for more details. 

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from lance_namespace_urllib3_client.models.fts_query_one_of import FtsQueryOneOf
from lance_namespace_urllib3_client.models.fts_query_one_of1 import FtsQueryOneOf1
from lance_namespace_urllib3_client.models.fts_query_one_of2 import FtsQueryOneOf2
from lance_namespace_urllib3_client.models.fts_query_one_of3 import FtsQueryOneOf3
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

FTSQUERY_ONE_OF_SCHEMAS = ["FtsQueryOneOf", "FtsQueryOneOf1", "FtsQueryOneOf2", "FtsQueryOneOf3", "FtsQueryOneOf4"]

class FtsQuery(BaseModel):
    """
    FtsQuery
    """
    # data type: FtsQueryOneOf
    oneof_schema_1_validator: Optional[FtsQueryOneOf] = None
    # data type: FtsQueryOneOf1
    oneof_schema_2_validator: Optional[FtsQueryOneOf1] = None
    # data type: FtsQueryOneOf2
    oneof_schema_3_validator: Optional[FtsQueryOneOf2] = None
    # data type: FtsQueryOneOf3
    oneof_schema_4_validator: Optional[FtsQueryOneOf3] = None
    # data type: FtsQueryOneOf4
    oneof_schema_5_validator: Optional[FtsQueryOneOf4] = None
    actual_instance: Optional[Union[FtsQueryOneOf, FtsQueryOneOf1, FtsQueryOneOf2, FtsQueryOneOf3, FtsQueryOneOf4]] = None
    one_of_schemas: Set[str] = { "FtsQueryOneOf", "FtsQueryOneOf1", "FtsQueryOneOf2", "FtsQueryOneOf3", "FtsQueryOneOf4" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = FtsQuery.model_construct()
        error_messages = []
        match = 0
        # validate data type: FtsQueryOneOf
        if not isinstance(v, FtsQueryOneOf):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FtsQueryOneOf`")
        else:
            match += 1
        # validate data type: FtsQueryOneOf1
        if not isinstance(v, FtsQueryOneOf1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FtsQueryOneOf1`")
        else:
            match += 1
        # validate data type: FtsQueryOneOf2
        if not isinstance(v, FtsQueryOneOf2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FtsQueryOneOf2`")
        else:
            match += 1
        # validate data type: FtsQueryOneOf3
        if not isinstance(v, FtsQueryOneOf3):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FtsQueryOneOf3`")
        else:
            match += 1
        # validate data type: FtsQueryOneOf4
        if not isinstance(v, FtsQueryOneOf4):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FtsQueryOneOf4`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in FtsQuery with oneOf schemas: FtsQueryOneOf, FtsQueryOneOf1, FtsQueryOneOf2, FtsQueryOneOf3, FtsQueryOneOf4. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in FtsQuery with oneOf schemas: FtsQueryOneOf, FtsQueryOneOf1, FtsQueryOneOf2, FtsQueryOneOf3, FtsQueryOneOf4. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into FtsQueryOneOf
        try:
            instance.actual_instance = FtsQueryOneOf.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FtsQueryOneOf1
        try:
            instance.actual_instance = FtsQueryOneOf1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FtsQueryOneOf2
        try:
            instance.actual_instance = FtsQueryOneOf2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FtsQueryOneOf3
        try:
            instance.actual_instance = FtsQueryOneOf3.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FtsQueryOneOf4
        try:
            instance.actual_instance = FtsQueryOneOf4.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into FtsQuery with oneOf schemas: FtsQueryOneOf, FtsQueryOneOf1, FtsQueryOneOf2, FtsQueryOneOf3, FtsQueryOneOf4. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into FtsQuery with oneOf schemas: FtsQueryOneOf, FtsQueryOneOf1, FtsQueryOneOf2, FtsQueryOneOf3, FtsQueryOneOf4. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], FtsQueryOneOf, FtsQueryOneOf1, FtsQueryOneOf2, FtsQueryOneOf3, FtsQueryOneOf4]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())

from lance_namespace_urllib3_client.models.fts_query_one_of4 import FtsQueryOneOf4
# TODO: Rewrite to not use raise_errors
FtsQuery.model_rebuild(raise_errors=False)

