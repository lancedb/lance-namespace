# coding: utf-8

"""
    Lance REST Namespace Specification

    **Lance Namespace Specification** is an open specification on top of the storage-based Lance data format  to standardize access to a collection of Lance tables (a.k.a. Lance datasets). It describes how a metadata service like Apache Hive MetaStore (HMS), Apache Gravitino, Unity Catalog, etc. should store and use Lance tables, as well as how ML/AI tools and analytics compute engines (will together be called _\"tools\"_ in this document) should integrate with Lance tables. A Lance namespace is a centralized repository for discovering, organizing, and managing Lance tables. It can either contain a collection of tables, or a collection of Lance namespaces recursively. It is designed to encapsulates concepts including namespace, metastore, database, schema, etc. that frequently appear in other similar data systems to allow easy integration with any system of any type of object hierarchy. In an enterprise environment, typically there is a requirement to store tables in a metadata service  for more advanced governance features around access control, auditing, lineage tracking, etc. **Lance REST Namespace** is an OpenAPI protocol that enables reading, writing and managing Lance tables by connecting those metadata services or building a custom metadata server in a standardized way. 

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from lance_namespace_urllib3_client.api.table_api import TableApi


class TestTableApi(unittest.TestCase):
    """TableApi unit test stubs"""

    def setUp(self) -> None:
        self.api = TableApi()

    def tearDown(self) -> None:
        pass

    def test_deregister_table(self) -> None:
        """Test case for deregister_table

        Deregister a table from its namespace
        """
        pass

    def test_describe_table(self) -> None:
        """Test case for describe_table

        Describe a table from the namespace
        """
        pass

    def test_drop_table(self) -> None:
        """Test case for drop_table

        Drop a table from its namespace
        """
        pass

    def test_register_table(self) -> None:
        """Test case for register_table

        Register a table to a namespace
        """
        pass

    def test_table_exists(self) -> None:
        """Test case for table_exists

        Check if a table exists
        """
        pass


if __name__ == '__main__':
    unittest.main()
