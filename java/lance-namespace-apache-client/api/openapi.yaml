openapi: 3.1.1
info:
  description: |
    This OpenAPI specification is a part of the Lance namespace specification. It contains 2 parts:
    The `components/schemas`, `components/responses`, `components/examples` sections define the request and response shape for each operation in a Lance Namespace across all implementations. See https://lancedb.github.io/lance-namespace/spec/operations for more details.
    The `servers`, `security`, `paths`, `components/parameters` sections are for the  Lance REST Namespace implementation, which defines a complete REST server that can work with Lance datasets. See https://lancedb.github.io/lance-namespace/spec/impls/rest for more details.
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: Lance REST Namespace Specification
  version: 0.0.1
servers:
- description: Generic server URL with all parts configurable
  url: "{scheme}://{host}:{port}/{basePath}"
  variables:
    scheme:
      default: http
    host:
      default: localhost
    port:
      default: "2333"
    basePath:
      default: ""
- description: Server URL when the port can be inferred from the scheme
  url: "{scheme}://{host}/{basePath}"
  variables:
    scheme:
      default: http
    host:
      default: localhost
    basePath:
      default: ""
security:
- OAuth2: []
- BearerAuth: []
paths:
  /v1/namespace/{id}/create:
    parameters:
    - $ref: '#/components/parameters/id'
    - $ref: '#/components/parameters/delimiter'
    post:
      description: |
        Create a new namespace.
        A namespace can manage either a collection of child namespaces, or a collection of tables.
        There are three modes when trying to create a namespace, to differentiate the behavior when a namespace of the same name already exists:
          * CREATE: the operation fails with 400.
          * EXIST_OK: the operation succeeds and the existing namespace is kept.
          * OVERWRITE: the existing namespace is dropped and a new empty namespace with this name is created.
      operationId: CreateNamespace
      parameters:
      - $ref: '#/components/parameters/id'
      - $ref: '#/components/parameters/delimiter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNamespaceRequest'
        required: true
      responses:
        "200":
          $ref: '#/components/responses/CreateNamespaceResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponse'
        "406":
          $ref: '#/components/responses/UnsupportedOperationErrorResponse'
        "409":
          $ref: '#/components/responses/ConflictErrorResponse'
        "503":
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        "5XX":
          $ref: '#/components/responses/ServerErrorResponse'
      summary: Create a new namespace
      tags:
      - Namespace
      x-content-type: application/json
      x-accepts:
      - application/json
  /v1/namespace/{id}/list:
    parameters:
    - $ref: '#/components/parameters/id'
    - $ref: '#/components/parameters/delimiter'
    post:
      description: |
        List all child namespace names of the root namespace or a given parent namespace.
      operationId: ListNamespaces
      parameters:
      - $ref: '#/components/parameters/id'
      - $ref: '#/components/parameters/delimiter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListNamespacesRequest'
        required: true
      responses:
        "200":
          $ref: '#/components/responses/ListNamespacesResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponse'
        "406":
          $ref: '#/components/responses/UnsupportedOperationErrorResponse'
        "503":
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        "5XX":
          $ref: '#/components/responses/ServerErrorResponse'
      summary: List namespaces
      tags:
      - Namespace
      x-content-type: application/json
      x-accepts:
      - application/json
  /v1/namespace/{id}/describe:
    parameters:
    - $ref: '#/components/parameters/id'
    - $ref: '#/components/parameters/delimiter'
    post:
      description: |
        Return the detailed information for a given namespace
      operationId: DescribeNamespace
      parameters:
      - $ref: '#/components/parameters/id'
      - $ref: '#/components/parameters/delimiter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeNamespaceRequest'
        required: true
      responses:
        "200":
          $ref: '#/components/responses/DescribeNamespaceResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponse'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponse'
        "503":
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        "5XX":
          $ref: '#/components/responses/ServerErrorResponse'
      summary: Describe information about a namespace
      tags:
      - Namespace
      x-content-type: application/json
      x-accepts:
      - application/json
  /v1/namespace/{id}/drop:
    parameters:
    - $ref: '#/components/parameters/id'
    - $ref: '#/components/parameters/delimiter'
    post:
      description: |
        Drop a namespace. The namespace must be empty.
      operationId: DropNamespace
      parameters:
      - $ref: '#/components/parameters/id'
      - $ref: '#/components/parameters/delimiter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DropNamespaceRequest'
        required: true
      responses:
        "200":
          $ref: '#/components/responses/DropNamespaceResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponse'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponse'
        "409":
          $ref: '#/components/responses/ConflictErrorResponse'
        "503":
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        "5XX":
          $ref: '#/components/responses/ServerErrorResponse'
      summary: Drop a namespace
      tags:
      - Namespace
      x-content-type: application/json
      x-accepts:
      - application/json
  /v1/namespace/{id}/exists:
    parameters:
    - $ref: '#/components/parameters/id'
    - $ref: '#/components/parameters/delimiter'
    post:
      description: |
        Check if a namespace exists.
      operationId: NamespaceExists
      parameters:
      - $ref: '#/components/parameters/id'
      - $ref: '#/components/parameters/delimiter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NamespaceExistsRequest'
        required: true
      responses:
        "200":
          $ref: '#/components/responses/NamespaceExistsResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponse'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponse'
        "503":
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        "5XX":
          $ref: '#/components/responses/ServerErrorResponse'
      summary: Check if a namespace exists
      tags:
      - Namespace
      x-content-type: application/json
      x-accepts:
      - application/json
  /v1/table/{id}/insert:
    parameters:
    - $ref: '#/components/parameters/id'
    - description: "Insert mode: \"append\" (default) or \"overwrite\""
      explode: true
      in: query
      name: mode
      required: false
      schema:
        default: append
        enum:
        - append
        - overwrite
        type: string
      style: form
    post:
      description: |
        Insert new records into an existing table using Arrow IPC format. Supports both lance-namespace format (with namespace in body) and LanceDB format (with database in headers).
      operationId: InsertTable
      parameters:
      - $ref: '#/components/parameters/id'
      - description: "Insert mode: \"append\" (default) or \"overwrite\""
        explode: true
        in: query
        name: mode
        required: false
        schema:
          default: append
          enum:
          - append
          - overwrite
          type: string
        style: form
      requestBody:
        content:
          application/x-arrow-ipc:
            schema:
              format: binary
              type: string
        description: Arrow IPC data
        required: true
      responses:
        "200":
          $ref: '#/components/responses/InsertTableResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponse'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponse'
        "503":
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        "5XX":
          $ref: '#/components/responses/ServerErrorResponse'
      summary: Insert records into a table
      tags:
      - Table
      x-content-type: application/x-arrow-ipc
      x-accepts:
      - application/json
  /v1/table/{id}/merge_insert:
    parameters:
    - $ref: '#/components/parameters/id'
    - description: Column name to use for matching rows (required)
      explode: true
      in: query
      name: "on"
      required: true
      schema:
        type: string
      style: form
    - description: Update all columns when rows match
      explode: true
      in: query
      name: when_matched_update_all
      required: false
      schema:
        default: false
        type: boolean
      style: form
    - description: Insert all columns when rows don't match
      explode: true
      in: query
      name: when_not_matched_insert_all
      required: false
      schema:
        default: false
        type: boolean
      style: form
    post:
      description: |
        Performs a merge insert (upsert) operation on a table. This operation updates existing rows based on a matching column and inserts new rows that don't match. Returns the number of rows inserted and updated.
      operationId: MergeInsertTable
      parameters:
      - $ref: '#/components/parameters/id'
      - description: Column name to use for matching rows (required)
        explode: true
        in: query
        name: "on"
        required: true
        schema:
          type: string
        style: form
      - description: Update all columns when rows match
        explode: true
        in: query
        name: when_matched_update_all
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: Insert all columns when rows don't match
        explode: true
        in: query
        name: when_not_matched_insert_all
        required: false
        schema:
          default: false
          type: boolean
        style: form
      requestBody:
        content:
          application/x-arrow-ipc:
            schema:
              format: binary
              type: string
        description: Arrow IPC data containing the records to merge
        required: true
      responses:
        "200":
          $ref: '#/components/responses/MergeInsertTableResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponse'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponse'
        "503":
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        "5XX":
          $ref: '#/components/responses/ServerErrorResponse'
      summary: Merge insert (upsert) records into a table
      tags:
      - Table
      x-content-type: application/x-arrow-ipc
      x-accepts:
      - application/json
  /v1/table/{id}/update:
    parameters:
    - $ref: '#/components/parameters/id'
    post:
      description: |
        Update existing rows in a table using SQL expressions. Each update consists of a column name and an SQL expression that will be evaluated against the current row's value. Optionally, a predicate can be provided to filter which rows to update.
      operationId: UpdateTable
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTableRequest'
        description: Update request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateTableResponse'
          description: Update successful
        "400":
          $ref: '#/components/responses/BadRequestErrorResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponse'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponse'
        "503":
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        "5XX":
          $ref: '#/components/responses/ServerErrorResponse'
      summary: Update rows in a table
      tags:
      - Table
      x-content-type: application/json
      x-accepts:
      - application/json
  /v1/table/{id}/delete:
    parameters:
    - $ref: '#/components/parameters/id'
    post:
      description: |
        Delete rows from a table based on a SQL predicate. Returns the number of rows that were deleted.
      operationId: DeleteFromTable
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteFromTableRequest'
        description: Delete request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteFromTableResponse'
          description: Delete successful
        "400":
          $ref: '#/components/responses/BadRequestErrorResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponse'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponse'
        "503":
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        "5XX":
          $ref: '#/components/responses/ServerErrorResponse'
      summary: Delete rows from a table
      tags:
      - Table
      x-content-type: application/json
      x-accepts:
      - application/json
  /v1/table/{id}/query:
    parameters:
    - $ref: '#/components/parameters/id'
    post:
      description: |
        Query a table with vector search and optional filtering. Returns results in Arrow IPC stream format.
      operationId: QueryTable
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
        description: Query request
        required: true
      responses:
        "200":
          content:
            application/vnd.apache.arrow.stream:
              schema:
                format: binary
                type: string
          description: Query results in Arrow IPC stream format
        "400":
          $ref: '#/components/responses/BadRequestErrorResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponse'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponse'
        "503":
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        "5XX":
          $ref: '#/components/responses/ServerErrorResponse'
      summary: Query a table
      tags:
      - Table
      x-content-type: application/json
      x-accepts:
      - application/json
      - application/vnd.apache.arrow.stream
  /v1/table/{id}/create_index:
    parameters:
    - $ref: '#/components/parameters/id'
    post:
      description: |
        Create an index on a table column for faster search operations. Supports vector indexes (IVF_FLAT, IVF_HNSW_SQ, IVF_PQ) and scalar indexes.
      operationId: CreateIndex
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIndexRequest'
        description: Index creation request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateIndexResponse'
          description: Index created successfully
        "400":
          $ref: '#/components/responses/BadRequestErrorResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponse'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponse'
        "503":
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        "5XX":
          $ref: '#/components/responses/ServerErrorResponse'
      summary: Create an index on a table
      tags:
      - Table
      x-content-type: application/json
      x-accepts:
      - application/json
  /v1/table/{id}/create_scalar_index:
    parameters:
    - $ref: '#/components/parameters/id'
    post:
      description: |
        Create a scalar index on a table column for faster search operations. Supports scalar indexes (BTREE, BITMAP, LABEL_LIST).
      operationId: CreateScalarIndex
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIndexRequest'
        description: Scalar index creation request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateIndexResponse'
          description: Scalar index created successfully
        "400":
          $ref: '#/components/responses/BadRequestErrorResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponse'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponse'
        "503":
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        "5XX":
          $ref: '#/components/responses/ServerErrorResponse'
      summary: Create a scalar index on a table
      tags:
      - Table
      x-content-type: application/json
      x-accepts:
      - application/json
  /v1/table/{id}/index/list:
    parameters:
    - $ref: '#/components/parameters/id'
    post:
      description: |
        List all indices created on a table. Returns information about each index including name, columns, status, and UUID.
      operationId: ListIndices
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IndexListRequest'
        description: Index list request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexListResponse'
          description: List of indices on the table
        "400":
          $ref: '#/components/responses/BadRequestErrorResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponse'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponse'
        "503":
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        "5XX":
          $ref: '#/components/responses/ServerErrorResponse'
      summary: List indices on a table
      tags:
      - Table
      x-content-type: application/json
      x-accepts:
      - application/json
  /v1/table/{id}/index/{index_name}/stats:
    parameters:
    - $ref: '#/components/parameters/id'
    - description: Name of the index to get stats for
      explode: false
      in: path
      name: index_name
      required: true
      schema:
        type: string
      style: simple
    post:
      description: |
        Get statistics for a specific index on a table. Returns information about the index type, distance type (for vector indices), and row counts.
      operationId: GetIndexStats
      parameters:
      - $ref: '#/components/parameters/id'
      - description: Name of the index to get stats for
        explode: false
        in: path
        name: index_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IndexStatsRequest'
        description: Index stats request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexStatsResponse'
          description: Index statistics
        "400":
          $ref: '#/components/responses/BadRequestErrorResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponse'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponse'
        "503":
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        "5XX":
          $ref: '#/components/responses/ServerErrorResponse'
      summary: Get index statistics
      tags:
      - Table
      x-content-type: application/json
      x-accepts:
      - application/json
  /v1/table/{id}/register:
    parameters:
    - $ref: '#/components/parameters/id'
    - $ref: '#/components/parameters/delimiter'
    post:
      description: |
        Register an existing table at a given storage location to a namespace.
      operationId: RegisterTable
      parameters:
      - $ref: '#/components/parameters/id'
      - $ref: '#/components/parameters/delimiter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterTableRequest'
        required: true
      responses:
        "200":
          $ref: '#/components/responses/RegisterTableResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponse'
        "406":
          $ref: '#/components/responses/UnsupportedOperationErrorResponse'
        "409":
          $ref: '#/components/responses/ConflictErrorResponse'
        "503":
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        "5XX":
          $ref: '#/components/responses/ServerErrorResponse'
      summary: Register a table to a namespace
      tags:
      - Table
      x-content-type: application/json
      x-accepts:
      - application/json
  /v1/table/{id}/list:
    parameters:
    - $ref: '#/components/parameters/id'
    - $ref: '#/components/parameters/delimiter'
    post:
      description: |
        List all child table names of the root namespace or a given parent namespace.
      operationId: ListTables
      parameters:
      - $ref: '#/components/parameters/id'
      - $ref: '#/components/parameters/delimiter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListTablesRequest'
        required: true
      responses:
        "200":
          $ref: '#/components/responses/ListTablesResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponse'
        "406":
          $ref: '#/components/responses/UnsupportedOperationErrorResponse'
        "503":
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        "5XX":
          $ref: '#/components/responses/ServerErrorResponse'
      summary: List tables
      tags:
      - Table
      x-content-type: application/json
      x-accepts:
      - application/json
  /v1/table/{id}/describe:
    parameters:
    - $ref: '#/components/parameters/id'
    - $ref: '#/components/parameters/delimiter'
    post:
      description: |
        Get a table's detailed information under a specified namespace. Supports both lance-namespace format (with namespace in body) and LanceDB format (with database in headers).
      operationId: DescribeTable
      parameters:
      - $ref: '#/components/parameters/id'
      - $ref: '#/components/parameters/delimiter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeTableRequest'
        required: true
      responses:
        "200":
          $ref: '#/components/responses/DescribeTableResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponse'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponse'
        "503":
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        "5XX":
          $ref: '#/components/responses/ServerErrorResponse'
      summary: Describe a table from the namespace
      tags:
      - Table
      x-content-type: application/json
      x-accepts:
      - application/json
  /v2/table/{id}/describe:
    parameters:
    - $ref: '#/components/parameters/id'
    - $ref: '#/components/parameters/delimiter'
    post:
      description: |
        Get a table's detailed information under a specified namespace.
      operationId: DescribeTableV2
      parameters:
      - $ref: '#/components/parameters/id'
      - $ref: '#/components/parameters/delimiter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeTableRequestV2'
        required: true
      responses:
        "200":
          $ref: '#/components/responses/DescribeTableResponseV2'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponse'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponse'
        "503":
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        "5XX":
          $ref: '#/components/responses/ServerErrorResponse'
      summary: Describe a table from the namespace
      tags:
      - Table
      x-content-type: application/json
      x-accepts:
      - application/json
  /v1/table/{id}/count_rows:
    parameters:
    - $ref: '#/components/parameters/id'
    - $ref: '#/components/parameters/delimiter'
    post:
      description: |
        Count the number of rows in a table. Supports both lance-namespace format (with namespace in body) and LanceDB format (with database in headers).
      operationId: CountRows
      parameters:
      - $ref: '#/components/parameters/id'
      - $ref: '#/components/parameters/delimiter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CountRowsRequest'
        required: true
      responses:
        "200":
          $ref: '#/components/responses/CountRowsResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponse'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponse'
        "503":
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        "5XX":
          $ref: '#/components/responses/ServerErrorResponse'
      summary: Count rows in a table
      tags:
      - Table
      x-content-type: application/json
      x-accepts:
      - application/json
  /v1/table/{id}/exists:
    parameters:
    - $ref: '#/components/parameters/id'
    - $ref: '#/components/parameters/delimiter'
    post:
      description: |
        Check if a table exists.
        This API should behave exactly like the GetTable API, except it does not contain a body.
      operationId: TableExists
      parameters:
      - $ref: '#/components/parameters/id'
      - $ref: '#/components/parameters/delimiter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TableExistsRequest'
        required: true
      responses:
        "200":
          $ref: '#/components/responses/TableExistsResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponse'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponse'
        "503":
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        "5XX":
          $ref: '#/components/responses/ServerErrorResponse'
      summary: Check if a table exists
      tags:
      - Table
      x-content-type: application/json
      x-accepts:
      - application/json
  /v1/transaction/{id}/describe:
    parameters:
    - $ref: '#/components/parameters/id'
    - $ref: '#/components/parameters/delimiter'
    post:
      description: Return a detailed information for a given transaction
      operationId: DescribeTransaction
      parameters:
      - $ref: '#/components/parameters/id'
      - $ref: '#/components/parameters/delimiter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeTransactionRequest'
        required: true
      responses:
        "200":
          $ref: '#/components/responses/DescribeTransactionResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponse'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponse'
        "503":
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        "5XX":
          $ref: '#/components/responses/ServerErrorResponse'
      summary: Describe information about a transaction
      tags:
      - Transaction
      x-content-type: application/json
      x-accepts:
      - application/json
  /v1/transaction/{id}/alter:
    parameters:
    - $ref: '#/components/parameters/id'
    - $ref: '#/components/parameters/delimiter'
    post:
      operationId: AlterTransaction
      parameters:
      - $ref: '#/components/parameters/id'
      - $ref: '#/components/parameters/delimiter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlterTransactionRequest'
        required: true
      responses:
        "200":
          $ref: '#/components/responses/AlterTransactionResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponse'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponse'
        "409":
          $ref: '#/components/responses/ConflictErrorResponse'
        "503":
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        "5XX":
          $ref: '#/components/responses/ServerErrorResponse'
      summary: Alter information of a transaction.
      tags:
      - Transaction
      x-content-type: application/json
      x-accepts:
      - application/json
  /v1/table/{id}/drop:
    parameters:
    - $ref: '#/components/parameters/id'
    - $ref: '#/components/parameters/delimiter'
    post:
      description: |
        Drop a table from its namespace and delete its data. If the table and its data can be immediately deleted, return information of the deleted table. Otherwise, return a transaction ID that client can use to track deletion progress.
      operationId: DropTable
      parameters:
      - $ref: '#/components/parameters/id'
      - $ref: '#/components/parameters/delimiter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DropTableRequest'
        required: true
      responses:
        "200":
          $ref: '#/components/responses/DropTableResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponse'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponse'
        "503":
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        "5XX":
          $ref: '#/components/responses/ServerErrorResponse'
      summary: Drop a table from its namespace
      tags:
      - Table
      x-content-type: application/json
      x-accepts:
      - application/json
  /v1/table/{id}/deregister:
    parameters:
    - $ref: '#/components/parameters/id'
    - $ref: '#/components/parameters/delimiter'
    post:
      description: |
        Deregister a table from its namespace. The table content remains available in the storage.
      operationId: DeregisterTable
      parameters:
      - $ref: '#/components/parameters/id'
      - $ref: '#/components/parameters/delimiter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeregisterTableRequest'
        required: true
      responses:
        "200":
          $ref: '#/components/responses/DeregisterTableResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponse'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponse'
        "503":
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        "5XX":
          $ref: '#/components/responses/ServerErrorResponse'
      summary: Deregister a table from its namespace
      tags:
      - Table
      x-content-type: application/json
      x-accepts:
      - application/json
  /v1/table/{id}/create:
    parameters:
    - $ref: '#/components/parameters/id'
    post:
      description: |
        Create a new table in the namespace. Supports both lance-namespace format (with namespace in body) and LanceDB format (with database in headers).
      operationId: CreateTable
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/x-arrow-ipc:
            schema:
              format: binary
              type: string
        description: Arrow IPC data
        required: true
      responses:
        "200":
          $ref: '#/components/responses/CreateTableResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponse'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponse'
        "503":
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        "5XX":
          $ref: '#/components/responses/ServerErrorResponse'
      summary: Create a table with the given name
      tags:
      - Table
      x-content-type: application/x-arrow-ipc
      x-accepts:
      - application/json
components:
  examples:
    ListNamespacesEmptyExample:
      summary: An empty list of namespaces
      value:
        namespaces: []
    ListNamespacesNonEmptyExample:
      summary: A non-empty list of namespaces
      value:
        namespaces:
        - accounting
        - credits
  parameters:
    id:
      description: |
        `string identifier` of an object in a namespace, following the Lance Namespace spec. When the value is equal to the delimiter, it represents the root namespace. For example, `v1/namespace/./list` performs a `ListNamespace` on the root namespace.
      explode: false
      in: path
      name: id
      required: true
      schema:
        type: string
      style: simple
    delimiter:
      description: |
        An optional delimiter of the `string identifier`, following the Lance Namespace spec. When not specified, the `.` delimiter must be used.
      explode: true
      in: query
      name: delimiter
      required: false
      schema:
        $ref: '#/components/schemas/PageToken'
      style: form
  responses:
    ListNamespacesResponse:
      content:
        application/json:
          examples:
            NonEmptyResponse:
              $ref: '#/components/examples/ListNamespacesNonEmptyExample'
            EmptyResponse:
              $ref: '#/components/examples/ListNamespacesEmptyExample'
          schema:
            $ref: '#/components/schemas/ListNamespacesResponse'
      description: A list of namespaces
    DescribeNamespaceResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DescribeNamespaceResponse'
      description: "Returns a namespace, as well as any properties stored on the namespace\
        \ if namespace properties are supported by the server."
    CreateNamespaceResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateNamespaceResponse'
      description: Result of creating a namespace
    DropNamespaceResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DropNamespaceResponse'
      description: Result of dropping a namespace
    NamespaceExistsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NamespaceExistsResponse'
      description: Result of checking if a namespace exists
    ListTablesResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ListTablesResponse'
      description: A list of tables
    DescribeTableResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DescribeTableResponse'
      description: Table properties result when loading a table
    DescribeTableResponseV2:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DescribeTableResponseV2'
      description: Table properties result when loading a table
    CountRowsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CountRowsResponse'
      description: Result of counting rows in a table
    CreateTableResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateTableResponse'
      description: Table properties result when creating a table
    InsertTableResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InsertTableResponse'
      description: Result of inserting records into a table
    MergeInsertTableResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MergeInsertTableResponse'
      description: Result of merge insert operation
    RegisterTableResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RegisterTableResponse'
      description: Table properties result when registering a table
    TableExistsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TableExistsResponse'
      description: Result of checking if a table exists
    DescribeTransactionResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DescribeTransactionResponse'
      description: Response of GetTransaction
    AlterTransactionResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AlterTransactionResponse'
      description: Response of AlterTransaction
    DropTableResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DropTableResponse'
      description: Response of DropTable
    DeregisterTableResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DeregisterTableResponse'
      description: Response of DeregisterTable
    BadRequestErrorResponse:
      content:
        application/json:
          example:
            type: /errors/bad-request
            title: Malformed request
            status: 400
            detail: ""
            instance: /v1/namespaces
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: "Indicates a bad request error. It could be caused by an unexpected\
        \ request body format or other forms of request validation failure, such as\
        \ invalid json. Usually serves application/json content, although in some\
        \ cases simple text/plain content might be returned by the server's middleware."
    UnauthorizedErrorResponse:
      content:
        application/json:
          example:
            type: /errors/unauthorized-request
            title: No valid authentication credentials for the operation
            status: 401
            detail: ""
            instance: /v1/namespaces
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: Unauthorized. The request lacks valid authentication credentials
        for the operation.
    ForbiddenErrorResponse:
      content:
        application/json:
          example:
            type: /errors/forbidden-request
            title: Not authorized to make this request
            status: 403
            detail: ""
            instance: /v1/namespaces
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: Forbidden. Authenticated user does not have the necessary permissions.
    NotFoundErrorResponse:
      content:
        application/json:
          example:
            type: /errors/not-found-error
            title: Not found Error
            status: 404
            detail: ""
            instance: "/v1/namespaces/{ns}"
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: A server-side problem that means can not find the specified resource.
    UnsupportedOperationErrorResponse:
      content:
        application/json:
          example:
            type: /errors/unsupported-operation
            title: The server does not support this operation
            status: 406
            detail: ""
            instance: /v1/namespaces
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: Not Acceptable / Unsupported Operation. The server does not support
        this operation.
    ConflictErrorResponse:
      content:
        application/json:
          example:
            type: /errors/conflict
            title: The namespace has been concurrently modified
            status: 409
            detail: ""
            instance: "/v1/namespaces/{ns}"
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: The request conflicts with the current state of the target resource.
    ServiceUnavailableErrorResponse:
      content:
        application/json:
          example:
            type: /errors/service-unavailable
            title: Slow down
            status: 503
            detail: ""
            instance: /v1/namespaces
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: The service is not ready to handle the request. The client should
        wait and retry. The service may additionally send a Retry-After header to
        indicate when to retry.
    ServerErrorResponse:
      content:
        application/json:
          example:
            type: /errors/server-error
            title: Internal Server Error
            status: 500
            detail: ""
            instance: /v1/namespaces
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: A server-side problem that might not be addressable from the client
        side. Used for server 5xx errors without more specific documentation in individual
        routes.
  schemas:
    ErrorResponse:
      description: "JSON error response model based on [RFC-7807](https://datatracker.ietf.org/doc/html/rfc7807)"
      example:
        instance: /login/log/abc123
        detail: Authentication failed due to incorrect username or password
        type: /errors/incorrect-user-pass
        title: Incorrect username or password
        status: 404
      properties:
        type:
          description: a URI identifier that categorizes the error
          example: /errors/incorrect-user-pass
          type: string
        title:
          description: "a brief, human-readable message about the error"
          example: Incorrect username or password
          type: string
        status:
          description: "HTTP response code, (if present) it must match the actual\
            \ HTTP code returned by the service"
          example: 404
          maximum: 600
          minimum: 400
          type: integer
        detail:
          description: a human-readable explanation of the error
          example: Authentication failed due to incorrect username or password
          type: string
        instance:
          description: a URI that identifies the specific occurrence of the error
          example: /login/log/abc123
          type: string
      required:
      - type
    CreateNamespaceRequest:
      example:
        mode: CREATE
        parent:
        - parent
        - parent
        name: name
        options:
          key: options
      properties:
        name:
          type: string
        parent:
          items:
            type: string
          type: array
        mode:
          enum:
          - CREATE
          - EXIST_OK
          - OVERWRITE
          type: string
        options:
          additionalProperties:
            type: string
      required:
      - mode
      - name
    CreateNamespaceResponse:
      example:
        parent:
        - parent
        - parent
        name: name
        properties:
          key: properties
      properties:
        name:
          type: string
        parent:
          items:
            type: string
          type: array
        properties:
          additionalProperties:
            type: string
      required:
      - name
    ListNamespacesRequest:
      example:
        parent:
        - parent
        - parent
        pageSize: 0
        pageToken: pageToken
      properties:
        parent:
          items:
            type: string
          type: array
        pageToken:
          description: |-
            An opaque token that allows pagination for list APIs (e.g. ListNamespaces).
            For an initial client request for a list API, if the server cannot return all items in one response, or if there are more items than the `pageSize` specified in the client request, the server must return a `nextPageToken` in the response indicating there are more results available.
            After the initial request, the value of `nextPageToken` from each response must be used by the client as the `pageToken` parameter value for the next request.
            Clients must interpret either `null`, missing value or empty string value of `nextPageToken` from a server response as the end of the listing results.
          type: string
          nullable: true
        pageSize:
          description: An inclusive upper bound of the number of results that a client
            will receive.
          type: integer
          nullable: true
    ListNamespacesResponse:
      example:
        nextPageToken: nextPageToken
        namespaces:
        - accounting
        - accounting
      properties:
        namespaces:
          items:
            example: accounting
            type: string
          type: array
          uniqueItems: true
        nextPageToken:
          description: |-
            An opaque token that allows pagination for list APIs (e.g. ListNamespaces).
            For an initial client request for a list API, if the server cannot return all items in one response, or if there are more items than the `pageSize` specified in the client request, the server must return a `nextPageToken` in the response indicating there are more results available.
            After the initial request, the value of `nextPageToken` from each response must be used by the client as the `pageToken` parameter value for the next request.
            Clients must interpret either `null`, missing value or empty string value of `nextPageToken` from a server response as the end of the listing results.
          type: string
          nullable: true
      required:
      - namespaces
    DescribeNamespaceRequest:
      example:
        parent:
        - parent
        - parent
        name: name
      properties:
        name:
          type: string
        parent:
          items:
            type: string
          type: array
      required:
      - name
    DescribeNamespaceResponse:
      example:
        parent:
        - parent
        - parent
        name: name
        properties:
          owner: Ralph
          created_at: "1452120468"
      properties:
        name:
          type: string
        parent:
          items:
            type: string
          type: array
        properties:
          additionalProperties:
            type: string
          default: {}
          description: "Properties stored on the namespace, if supported by the server.\
            \ If the server does not support namespace properties, it should return\
            \ null for this field. If namespace properties are supported, but none\
            \ are set, it should return an empty object."
          example:
            owner: Ralph
            created_at: "1452120468"
          nullable: true
      required:
      - name
    DropNamespaceRequest:
      example:
        mode: SKIP
        parent:
        - parent
        - parent
        name: name
        behavior: RESTRICT
      properties:
        name:
          type: string
        parent:
          items:
            type: string
          type: array
        mode:
          description: |
            The mode for dropping a namespace, deciding the server behavior when the namespace to drop is not found. - FAIL (default): the server must return 400 indicating the namespace to drop does not exist. - SKIP: the server must return 204 indicating the drop operation has succeeded.
          enum:
          - SKIP
          - FAIL
          type: string
        behavior:
          description: |
            The behavior for dropping a namespace. - RESTRICT (default): the namespace should not contain any table or child namespace when drop is initiated.
                If tables are found, the server should return error and not drop the namespace.
            - CASCADE: all tables and child namespaces in the namespace are dropped before the namespace is dropped.
          enum:
          - RESTRICT
          - CASCADE
          type: string
      required:
      - name
    DropNamespaceResponse:
      example:
        parent:
        - parent
        - parent
        name: name
        properties:
          key: properties
        transactionId: transactionId
      properties:
        name:
          type: string
        parent:
          items:
            type: string
          type: array
        properties:
          additionalProperties:
            type: string
        transactionId:
          description: |
            If present, indicating the operation is long running and should be tracked using GetTransaction
          type: string
    NamespaceExistsRequest:
      example:
        parent:
        - parent
        - parent
        name: name
      properties:
        name:
          type: string
        parent:
          items:
            type: string
          type: array
      required:
      - name
    NamespaceExistsResponse:
      example:
        exists: true
      properties:
        exists:
          type: boolean
      required:
      - exists
    PageToken:
      description: |-
        An opaque token that allows pagination for list APIs (e.g. ListNamespaces).
        For an initial client request for a list API, if the server cannot return all items in one response, or if there are more items than the `pageSize` specified in the client request, the server must return a `nextPageToken` in the response indicating there are more results available.
        After the initial request, the value of `nextPageToken` from each response must be used by the client as the `pageToken` parameter value for the next request.
        Clients must interpret either `null`, missing value or empty string value of `nextPageToken` from a server response as the end of the listing results.
      type: string
      nullable: true
    PageSize:
      description: An inclusive upper bound of the number of results that a client
        will receive.
      type: integer
      nullable: true
    RegisterTableRequest:
      example:
        name: name
        namespace:
        - namespace
        - namespace
        location: location
      properties:
        name:
          type: string
        namespace:
          items:
            type: string
          type: array
        location:
          type: string
      required:
      - location
      - name
      - namespace
    RegisterTableResponse:
      example:
        name: name
        namespace:
        - namespace
        - namespace
        location: location
        properties:
          key: properties
      properties:
        name:
          type: string
        namespace:
          items:
            type: string
          type: array
        location:
          type: string
        properties:
          additionalProperties:
            type: string
      required:
      - location
      - name
      - namespace
    ListTablesRequest:
      example:
        parent:
        - parent
        - parent
        pageSize: 0
        pageToken: pageToken
      properties:
        parent:
          items:
            type: string
          type: array
        pageToken:
          description: |-
            An opaque token that allows pagination for list APIs (e.g. ListNamespaces).
            For an initial client request for a list API, if the server cannot return all items in one response, or if there are more items than the `pageSize` specified in the client request, the server must return a `nextPageToken` in the response indicating there are more results available.
            After the initial request, the value of `nextPageToken` from each response must be used by the client as the `pageToken` parameter value for the next request.
            Clients must interpret either `null`, missing value or empty string value of `nextPageToken` from a server response as the end of the listing results.
          type: string
          nullable: true
        pageSize:
          description: An inclusive upper bound of the number of results that a client
            will receive.
          type: integer
          nullable: true
    ListTablesResponse:
      example:
        tables:
        - cart
        - cart
        nextPageToken: nextPageToken
      properties:
        tables:
          items:
            example: cart
            type: string
          type: array
          uniqueItems: true
        nextPageToken:
          description: |-
            An opaque token that allows pagination for list APIs (e.g. ListNamespaces).
            For an initial client request for a list API, if the server cannot return all items in one response, or if there are more items than the `pageSize` specified in the client request, the server must return a `nextPageToken` in the response indicating there are more results available.
            After the initial request, the value of `nextPageToken` from each response must be used by the client as the `pageToken` parameter value for the next request.
            Clients must interpret either `null`, missing value or empty string value of `nextPageToken` from a server response as the end of the listing results.
          type: string
          nullable: true
      required:
      - tables
    DescribeTableRequest:
      example:
        name: name
        namespace:
        - namespace
        - namespace
        version: 0
      properties:
        name:
          type: string
        namespace:
          items:
            type: string
          type: array
        version:
          format: int64
          minimum: 0
          nullable: true
          type: integer
    DescribeTableResponse:
      example:
        schema:
          metadata:
            key: metadata
          fields:
          - metadata:
              key: metadata
            nullable: true
            name: name
            type:
              length: 0
              fields: "{}"
              type: type
          - metadata:
              key: metadata
            nullable: true
            name: name
            type:
              length: 0
              fields: "{}"
              type: type
        stats:
          num_deleted_rows: 0
          num_fragments: 0
        table_uri: table_uri
        name: name
        namespace:
        - namespace
        - namespace
        location: location
        version: 0
        properties:
          key: properties
        table: table
      properties:
        name:
          type: string
        namespace:
          items:
            type: string
          type: array
        location:
          type: string
        properties:
          additionalProperties:
            type: string
        schema:
          $ref: '#/components/schemas/JsonSchema'
        stats:
          $ref: '#/components/schemas/TableBasicStats'
        table:
          type: string
        table_uri:
          description: "Table URI, optional"
          nullable: true
          type: string
        version:
          format: int64
          minimum: 0
          type: integer
      required:
      - location
      - name
      - namespace
      - schema
      - stats
      - table
      - version
    DescribeTableRequestV2:
      example:
        name: name
        namespace:
        - namespace
        - namespace
      properties:
        name:
          type: string
        namespace:
          items:
            type: string
          type: array
      required:
      - name
      - namespace
    DescribeTableResponseV2:
      example:
        name: name
        namespace:
        - namespace
        - namespace
        location: location
        properties:
          key: properties
      properties:
        name:
          type: string
        namespace:
          items:
            type: string
          type: array
        location:
          type: string
        properties:
          additionalProperties:
            type: string
      required:
      - location
      - name
      - namespace
    CountRowsRequest:
      example:
        name: name
        namespace:
        - namespace
        - namespace
      properties:
        name:
          type: string
        namespace:
          items:
            type: string
          type: array
    CountRowsResponse:
      description: Response containing the count of rows. Serializes transparently
        as just the number for backward compatibility.
      format: int64
      minimum: 0
      type: integer
    InsertTableResponse:
      description: Response from inserting records into a table
      example:
        version: 0
      properties:
        version:
          description: The version of the table after the insert
          format: int64
          minimum: 0
          type: integer
    MergeInsertTableRequest:
      properties:
        name:
          description: The table name
          type: string
        namespace:
          description: The namespace identifier
          items:
            type: string
          type: array
      required:
      - name
      - namespace
    MergeInsertTableResponse:
      description: Response from merge insert operation
      example:
        num_inserted_rows: 0
        num_updated_rows: 0
        num_deleted_rows: 0
        version: 0
      properties:
        num_updated_rows:
          description: Number of rows updated
          format: int64
          minimum: 0
          type: integer
        num_inserted_rows:
          description: Number of rows inserted
          format: int64
          minimum: 0
          type: integer
        num_deleted_rows:
          description: Number of rows deleted (typically 0 for merge insert)
          format: int64
          minimum: 0
          type: integer
        version:
          description: The commit version associated with the operation
          format: int64
          minimum: 0
          type: integer
    UpdateTableRequest:
      example:
        predicate: predicate
        name: name
        namespace:
        - namespace
        - namespace
        updates:
        - - updates
          - updates
        - - updates
          - updates
      properties:
        name:
          description: The table name
          type: string
        namespace:
          description: The namespace identifier
          items:
            type: string
          type: array
        predicate:
          description: Optional SQL predicate to filter rows for update
          type: string
          nullable: true
        updates:
          description: "List of column updates as [column_name, expression] pairs"
          items:
            items:
              type: string
            maxItems: 2
            minItems: 2
            type: array
          type: array
      required:
      - name
      - namespace
      - updates
    UpdateTableResponse:
      example:
        updated_rows: 0
        version: 0
      properties:
        updated_rows:
          description: Number of rows updated
          format: int64
          minimum: 0
          type: integer
        version:
          description: The commit version associated with the operation
          format: int64
          minimum: 0
          type: integer
      required:
      - updated_rows
      - version
    DeleteFromTableRequest:
      example:
        predicate: predicate
        name: name
        namespace:
        - namespace
        - namespace
      properties:
        name:
          description: The table name
          type: string
        namespace:
          description: The namespace identifier
          items:
            type: string
          type: array
        predicate:
          description: SQL predicate to filter rows for deletion
          type: string
      required:
      - name
      - namespace
      - predicate
    DeleteFromTableResponse:
      example:
        version: 0
      properties:
        version:
          description: The commit version associated with the operation
          format: int64
          minimum: 0
          type: integer
      required:
      - version
    QueryRequest:
      example:
        ef: 1
        offset: 0
        columns:
        - columns
        - columns
        k: 1
        version: 0
        with_row_id: true
        prefilter: true
        filter: filter
        refine_factor: 1
        distance_type: l2
        bypass_vector_index: true
        nprobes: 1
        name: name
        namespace:
        - namespace
        - namespace
        vector:
        - 0.8008282
        - 0.8008282
      properties:
        name:
          type: string
        namespace:
          items:
            type: string
          type: array
        vector:
          description: Query vector for similarity search
          items:
            format: float
            type: number
          type: array
        k:
          description: Number of results to return
          minimum: 1
          type: integer
        filter:
          description: Optional SQL filter expression
          type: string
        columns:
          description: Optional list of columns to return
          items:
            type: string
          type: array
        distance_type:
          description: Distance metric to use
          enum:
          - l2
          - cosine
          - dot
          type: string
        prefilter:
          description: Whether to apply filtering before vector search
          type: boolean
        bypass_vector_index:
          description: Whether to bypass vector index
          type: boolean
        ef:
          description: Search effort parameter for HNSW index
          minimum: 1
          type: integer
        nprobes:
          description: Number of probes for IVF index
          minimum: 1
          type: integer
        refine_factor:
          description: Refine factor for search
          minimum: 1
          type: integer
        with_row_id:
          description: Whether to include row ID in results
          type: boolean
        offset:
          description: Number of results to skip
          minimum: 0
          type: integer
        version:
          description: Table version to query
          format: int64
          minimum: 0
          type: integer
      required:
      - k
      - name
      - namespace
      - vector
    CreateIndexRequest:
      example:
        max_iterations: 1
        num_sub_vectors: 1
        sample_rate: 1
        name: name
        namespace:
        - namespace
        - namespace
        column: column
        metric_type: l2
        num_partitions: 1
        num_bits: 2
        index_type: BTREE
      properties:
        name:
          description: The table name
          type: string
        namespace:
          description: The namespace identifier
          items:
            type: string
          type: array
        column:
          description: Name of the column to create index on
          type: string
        index_type:
          description: Type of index to create
          enum:
          - BTREE
          - BITMAP
          - LABEL_LIST
          - IVF_FLAT
          - IVF_HNSW_SQ
          - IVF_PQ
          - FTS
          type: string
        metric_type:
          description: Distance metric type for vector indexes
          enum:
          - l2
          - cosine
          - dot
          type: string
        num_partitions:
          description: Number of partitions for IVF indexes
          minimum: 1
          type: integer
        num_sub_vectors:
          description: Number of sub-vectors for PQ indexes
          minimum: 1
          type: integer
        num_bits:
          description: Number of bits for scalar quantization
          maximum: 8
          minimum: 1
          type: integer
        max_iterations:
          description: Maximum iterations for index building
          minimum: 1
          type: integer
        sample_rate:
          description: Sample rate for index building
          minimum: 1
          type: integer
      required:
      - column
      - index_type
      - name
      - namespace
    CreateIndexResponse:
      example:
        name: name
        namespace:
        - namespace
        - namespace
        location: location
        properties:
          key: properties
      properties:
        name:
          description: The table name
          type: string
        namespace:
          description: The namespace identifier
          items:
            type: string
          type: array
        location:
          description: Table location (usually empty)
          type: string
        properties:
          additionalProperties:
            type: string
          description: Additional properties (usually empty)
      required:
      - location
      - name
      - namespace
    IndexListRequest:
      example:
        name: name
        namespace:
        - namespace
        - namespace
        version: 0
      properties:
        name:
          description: The table name
          type: string
        namespace:
          description: The namespace identifier
          items:
            type: string
          type: array
        version:
          description: Optional table version to list indexes from
          format: int64
          minimum: 0
          type: integer
          nullable: true
      required:
      - name
      - namespace
    IndexListResponse:
      example:
        indexes:
        - index_uuid: index_uuid
          columns:
          - columns
          - columns
          index_name: index_name
          status: status
        - index_uuid: index_uuid
          columns:
          - columns
          - columns
          index_name: index_name
          status: status
        name: name
        namespace:
        - namespace
        - namespace
        location: location
        properties:
          key: properties
      properties:
        name:
          description: The table name
          type: string
        namespace:
          description: The namespace identifier
          items:
            type: string
          type: array
        location:
          description: Table location (usually empty)
          type: string
        properties:
          additionalProperties:
            type: string
          description: Additional properties (usually empty)
        indexes:
          description: List of indexes on the table
          items:
            $ref: '#/components/schemas/IndexListItemResponse'
          type: array
      required:
      - indexes
      - location
      - name
      - namespace
    IndexListItemResponse:
      example:
        index_uuid: index_uuid
        columns:
        - columns
        - columns
        index_name: index_name
        status: status
      properties:
        index_name:
          description: Name of the index
          type: string
        index_uuid:
          description: Unique identifier for the index
          type: string
        columns:
          description: Columns covered by this index
          items:
            type: string
          type: array
        status:
          description: Current status of the index
          type: string
      required:
      - columns
      - index_name
      - index_uuid
      - status
    IndexStatsRequest:
      example:
        name: name
        namespace:
        - namespace
        - namespace
        version: 0
      properties:
        name:
          description: The table name
          type: string
        namespace:
          description: The namespace identifier
          items:
            type: string
          type: array
        version:
          description: Optional table version to get stats for
          format: int64
          minimum: 0
          type: integer
          nullable: true
      required:
      - name
      - namespace
    IndexStatsResponse:
      example:
        distance_type: distance_type
        num_unindexed_rows: 0
        num_indexed_rows: 0
        index_type: index_type
      properties:
        distance_type:
          description: Distance type for vector indexes
          type: string
          nullable: true
        index_type:
          description: Type of the index
          type: string
          nullable: true
        num_indexed_rows:
          description: Number of indexed rows
          format: int64
          minimum: 0
          type: integer
          nullable: true
        num_unindexed_rows:
          description: Number of unindexed rows
          format: int64
          minimum: 0
          type: integer
          nullable: true
    JsonSchema:
      description: "JSON representation of a Apache Arrow [Schema]."
      example:
        metadata:
          key: metadata
        fields:
        - metadata:
            key: metadata
          nullable: true
          name: name
          type:
            length: 0
            fields: "{}"
            type: type
        - metadata:
            key: metadata
          nullable: true
          name: name
          type:
            length: 0
            fields: "{}"
            type: type
      properties:
        fields:
          items:
            $ref: '#/components/schemas/JsonField'
          type: array
        metadata:
          additionalProperties:
            type: string
      required:
      - fields
    JsonField:
      description: "JSON representation of an Apache Arrow [Field]."
      example:
        metadata:
          key: metadata
        nullable: true
        name: name
        type:
          length: 0
          fields: "{}"
          type: type
      properties:
        metadata:
          additionalProperties:
            type: string
        name:
          type: string
        nullable:
          type: boolean
        type:
          $ref: '#/components/schemas/JsonDataType'
      required:
      - name
      - nullable
      - type
    JsonDataType:
      description: "JSON representation of an Apache Arrow [DataType]."
      example:
        length: 0
        fields: "{}"
        type: type
      properties:
        fields:
          type: object
        length:
          minimum: 0
          nullable: true
          type: integer
        type:
          type: string
      required:
      - type
    Binary:
      format: binary
      type: string
    CreateTableResponse:
      example:
        name: name
        namespace:
        - namespace
        - namespace
        location: location
        properties:
          key: properties
      properties:
        name:
          type: string
        namespace:
          items:
            type: string
          type: array
        location:
          type: string
        properties:
          additionalProperties:
            type: string
      required:
      - location
      - name
      - namespace
    TableExistsRequest:
      example:
        name: name
        namespace:
        - namespace
        - namespace
      properties:
        name:
          type: string
        namespace:
          items:
            type: string
          type: array
      required:
      - name
      - namespace
    TableExistsResponse:
      example:
        exists: true
      properties:
        exists:
          type: boolean
      required:
      - exists
    TransactionStatus:
      enum:
      - QUEUED
      - RUNNING
      - SUCCEEDED
      - FAILED
      - CANCELED
      type: string
    DescribeTransactionRequest:
      example:
        id: id
      properties:
        id:
          type: string
      required:
      - id
    DescribeTransactionResponse:
      example:
        id: id
        properties:
          key: properties
        status: QUEUED
      properties:
        id:
          type: string
        status:
          $ref: '#/components/schemas/TransactionStatus'
        properties:
          additionalProperties:
            type: string
      required:
      - id
      - status
    AlterTransactionSetStatus:
      example:
        status: QUEUED
      properties:
        status:
          $ref: '#/components/schemas/TransactionStatus'
    AlterTransactionSetProperty:
      example:
        mode: OVERWRITE
        value: value
        key: key
      properties:
        key:
          type: string
        value:
          type: string
        mode:
          $ref: '#/components/schemas/SetPropertyMode'
    SetPropertyMode:
      description: |
        The behavior if the property key already exists. - OVERWRITE (default): overwrite the existing value with the provided value - FAIL: fail the entire operation - SKIP: keep the existing value and skip setting the provided value
      enum:
      - OVERWRITE
      - FAIL
      - SKIP
      type: string
    AlterTransactionUnsetProperty:
      example:
        mode: SKIP
        key: key
      properties:
        key:
          type: string
        mode:
          $ref: '#/components/schemas/UnsetPropertyMode'
    UnsetPropertyMode:
      description: |
        The behavior if the property key to unset does not exist. - SKIP (default): skip the property to unset - FAIL: fail the entire operation
      enum:
      - SKIP
      - FAIL
      type: string
    AlterTransactionAction:
      description: |
        A single action that could be performed to alter a transaction. This action holds the model definition for all types of specific actions models, this is to minimize difference and compatibility issue across codegen in different languages. When used, only one of the actions should be non-null for each action. If you would like to perform multiple actions, set a list of actions in the AlterTransactionRequest.
      example:
        setStatusAction:
          status: QUEUED
        unsetPropertyAction:
          mode: SKIP
          key: key
        setPropertyAction:
          mode: OVERWRITE
          value: value
          key: key
      properties:
        setStatusAction:
          $ref: '#/components/schemas/AlterTransactionSetStatus'
        setPropertyAction:
          $ref: '#/components/schemas/AlterTransactionSetProperty'
        unsetPropertyAction:
          $ref: '#/components/schemas/AlterTransactionUnsetProperty'
    AlterTransactionRequest:
      description: |
        Alter a transaction with a list of actions. The server should either succeed and apply all actions, or fail and apply no action.
      example:
        id: id
        actions:
        - setStatusAction:
            status: QUEUED
          unsetPropertyAction:
            mode: SKIP
            key: key
          setPropertyAction:
            mode: OVERWRITE
            value: value
            key: key
        - setStatusAction:
            status: QUEUED
          unsetPropertyAction:
            mode: SKIP
            key: key
          setPropertyAction:
            mode: OVERWRITE
            value: value
            key: key
      properties:
        id:
          type: string
        actions:
          items:
            $ref: '#/components/schemas/AlterTransactionAction'
          minItems: 1
          type: array
      required:
      - actions
      - id
    AlterTransactionResponse:
      example:
        id: id
        status: QUEUED
      properties:
        id:
          type: string
        status:
          $ref: '#/components/schemas/TransactionStatus'
      required:
      - id
      - status
    DropTableRequest:
      example:
        name: name
        namespace:
        - namespace
        - namespace
      properties:
        name:
          type: string
        namespace:
          items:
            type: string
          type: array
      required:
      - name
    DropTableResponse:
      example:
        name: name
        namespace:
        - namespace
        - namespace
        location: location
        properties:
          key: properties
        transactionId: transactionId
      properties:
        name:
          type: string
        namespace:
          items:
            type: string
          type: array
        location:
          type: string
        properties:
          additionalProperties:
            type: string
        transactionId:
          type: string
    DeregisterTableRequest:
      example:
        name: name
        namespace:
        - namespace
        - namespace
      properties:
        name:
          type: string
        namespace:
          items:
            type: string
          type: array
      required:
      - name
    DeregisterTableResponse:
      example:
        name: name
        namespace:
        - namespace
        - namespace
        location: location
        properties:
          key: properties
      properties:
        name:
          type: string
        namespace:
          items:
            type: string
          type: array
        location:
          type: string
        properties:
          additionalProperties:
            type: string
    TableBasicStats:
      example:
        num_deleted_rows: 0
        num_fragments: 0
      properties:
        num_deleted_rows:
          minimum: 0
          type: integer
        num_fragments:
          minimum: 0
          type: integer
      required:
      - num_deleted_rows
      - num_fragments

