/*
 * Lance REST Namespace Specification
 *
 * This OpenAPI specification is a part of the Lance namespace specification. It contains 2 parts: The `components/schemas`, `components/responses`, `components/examples` sections define the request and response shape for each operation in a Lance Namespace across all implementations. See https://lancedb.github.io/lance-namespace/spec/operations for more details. The `servers`, `security`, `paths`, `components/parameters` sections are for the  Lance REST Namespace implementation, which defines a complete REST server that can work with Lance datasets. See https://lancedb.github.io/lance-namespace/spec/impls/rest for more details. 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateIndexRequest {
    /// The table name
    #[serde(rename = "name")]
    pub name: String,
    /// The namespace identifier
    #[serde(rename = "namespace")]
    pub namespace: Vec<String>,
    /// Name of the column to create index on
    #[serde(rename = "column")]
    pub column: String,
    /// Type of index to create
    #[serde(rename = "index_type")]
    pub index_type: IndexType,
    /// Distance metric type for vector indexes
    #[serde(rename = "metric_type", skip_serializing_if = "Option::is_none")]
    pub metric_type: Option<MetricType>,
    /// Number of partitions for IVF indexes
    #[serde(rename = "num_partitions", skip_serializing_if = "Option::is_none")]
    pub num_partitions: Option<i32>,
    /// Number of sub-vectors for PQ indexes
    #[serde(rename = "num_sub_vectors", skip_serializing_if = "Option::is_none")]
    pub num_sub_vectors: Option<i32>,
    /// Number of bits for scalar quantization
    #[serde(rename = "num_bits", skip_serializing_if = "Option::is_none")]
    pub num_bits: Option<i32>,
    /// Maximum iterations for index building
    #[serde(rename = "max_iterations", skip_serializing_if = "Option::is_none")]
    pub max_iterations: Option<i32>,
    /// Sample rate for index building
    #[serde(rename = "sample_rate", skip_serializing_if = "Option::is_none")]
    pub sample_rate: Option<i32>,
}

impl CreateIndexRequest {
    pub fn new(name: String, namespace: Vec<String>, column: String, index_type: IndexType) -> CreateIndexRequest {
        CreateIndexRequest {
            name,
            namespace,
            column,
            index_type,
            metric_type: None,
            num_partitions: None,
            num_sub_vectors: None,
            num_bits: None,
            max_iterations: None,
            sample_rate: None,
        }
    }
}
/// Type of index to create
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum IndexType {
    #[serde(rename = "BTREE")]
    Btree,
    #[serde(rename = "BITMAP")]
    Bitmap,
    #[serde(rename = "LABEL_LIST")]
    LabelList,
    #[serde(rename = "IVF_FLAT")]
    IvfFlat,
    #[serde(rename = "IVF_HNSW_SQ")]
    IvfHnswSq,
    #[serde(rename = "IVF_PQ")]
    IvfPq,
    #[serde(rename = "FTS")]
    Fts,
}

impl Default for IndexType {
    fn default() -> IndexType {
        Self::Btree
    }
}
/// Distance metric type for vector indexes
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MetricType {
    #[serde(rename = "l2")]
    L2,
    #[serde(rename = "cosine")]
    Cosine,
    #[serde(rename = "dot")]
    Dot,
}

impl Default for MetricType {
    fn default() -> MetricType {
        Self::L2
    }
}

