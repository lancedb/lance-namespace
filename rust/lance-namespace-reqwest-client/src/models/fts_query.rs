/*
 * Lance Namespace Specification
 *
 * This OpenAPI specification is a part of the Lance namespace specification. It contains 2 parts:  The `components/schemas`, `components/responses`, `components/examples`, `tags` sections define the request and response shape for each operation in a Lance Namespace across all implementations. See https://lancedb.github.io/lance-namespace/spec/operations for more details.  The `servers`, `security`, `paths`, `components/parameters` sections are for the  Lance REST Namespace implementation, which defines a complete REST server that can work with Lance datasets. See https://lancedb.github.io/lance-namespace/spec/impls/rest for more details. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// FtsQuery : Full-text search query. Exactly one query type field must be provided. This structure follows the same pattern as AlterTransactionAction to minimize differences and compatibility issues across codegen in different languages. 
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FtsQuery {
    #[serde(rename = "match", skip_serializing_if = "Option::is_none")]
    pub r#match: Option<Box<models::MatchQuery>>,
    #[serde(rename = "phrase", skip_serializing_if = "Option::is_none")]
    pub phrase: Option<Box<models::PhraseQuery>>,
    #[serde(rename = "boost", skip_serializing_if = "Option::is_none")]
    pub boost: Option<Box<models::BoostQuery>>,
    #[serde(rename = "multi_match", skip_serializing_if = "Option::is_none")]
    pub multi_match: Option<Box<models::MultiMatchQuery>>,
    #[serde(rename = "boolean", skip_serializing_if = "Option::is_none")]
    pub boolean: Option<Box<models::BooleanQuery>>,
}

impl FtsQuery {
    /// Full-text search query. Exactly one query type field must be provided. This structure follows the same pattern as AlterTransactionAction to minimize differences and compatibility issues across codegen in different languages. 
    pub fn new() -> FtsQuery {
        FtsQuery {
            r#match: None,
            phrase: None,
            boost: None,
            multi_match: None,
            boolean: None,
        }
    }
}

