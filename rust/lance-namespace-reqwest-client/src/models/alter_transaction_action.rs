/*
 * Lance REST Namespace Specification
 *
 * **Lance Namespace Specification** is an open specification on top of the storage-based Lance data format  to standardize access to a collection of Lance tables (a.k.a. Lance datasets). It describes how a metadata service like Apache Hive MetaStore (HMS), Apache Gravitino, Unity Catalog, etc. should store and use Lance tables, as well as how ML/AI tools and analytics compute engines (will together be called _\"tools\"_ in this document) should integrate with Lance tables. A Lance namespace is a centralized repository for discovering, organizing, and managing Lance tables. It can either contain a collection of tables, or a collection of Lance namespaces recursively. It is designed to encapsulates concepts including namespace, metastore, database, schema, etc. that frequently appear in other similar data systems to allow easy integration with any system of any type of object hierarchy. In an enterprise environment, typically there is a requirement to store tables in a metadata service  for more advanced governance features around access control, auditing, lineage tracking, etc. **Lance REST Namespace** is an OpenAPI protocol that enables reading, writing and managing Lance tables by connecting those metadata services or building a custom metadata server in a standardized way. 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// AlterTransactionAction : A single action that could be performed to alter a transaction. This action holds the model definition for all types of specific actions models, this is to minimize difference and compatibility issue across codegen in different languages. When used, only one of the actions should be non-null for each action. If you would like to perform multiple actions, set a list of actions in the AlterTransactionRequest. 
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AlterTransactionAction {
    #[serde(rename = "setStatusAction", skip_serializing_if = "Option::is_none")]
    pub set_status_action: Option<Box<models::AlterTransactionSetStatus>>,
    #[serde(rename = "setPropertyAction", skip_serializing_if = "Option::is_none")]
    pub set_property_action: Option<Box<models::AlterTransactionSetProperty>>,
    #[serde(rename = "unsetPropertyAction", skip_serializing_if = "Option::is_none")]
    pub unset_property_action: Option<Box<models::AlterTransactionUnsetProperty>>,
}

impl AlterTransactionAction {
    /// A single action that could be performed to alter a transaction. This action holds the model definition for all types of specific actions models, this is to minimize difference and compatibility issue across codegen in different languages. When used, only one of the actions should be non-null for each action. If you would like to perform multiple actions, set a list of actions in the AlterTransactionRequest. 
    pub fn new() -> AlterTransactionAction {
        AlterTransactionAction {
            set_status_action: None,
            set_property_action: None,
            unset_property_action: None,
        }
    }
}

