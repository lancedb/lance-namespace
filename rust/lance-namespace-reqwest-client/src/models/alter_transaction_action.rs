/*
 * Lance REST Namespace Specification
 *
 * This OpenAPI specification is a part of the Lance namespace specification. It contains 2 parts: The `components/schemas`, `components/responses`, `components/examples` sections define the request and response shape for each operation in a Lance Namespace across all implementations. See https://lancedb.github.io/lance-namespace/spec/operations for more details. The `servers`, `security`, `paths`, `components/parameters` sections are for the  Lance REST Namespace implementation, which defines a complete REST server that can work with Lance datasets. See https://lancedb.github.io/lance-namespace/spec/impls/rest for more details. 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// AlterTransactionAction : A single action that could be performed to alter a transaction. This action holds the model definition for all types of specific actions models, this is to minimize difference and compatibility issue across codegen in different languages. When used, only one of the actions should be non-null for each action. If you would like to perform multiple actions, set a list of actions in the AlterTransactionRequest. 
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AlterTransactionAction {
    #[serde(rename = "setStatusAction", skip_serializing_if = "Option::is_none")]
    pub set_status_action: Option<Box<models::AlterTransactionSetStatus>>,
    #[serde(rename = "setPropertyAction", skip_serializing_if = "Option::is_none")]
    pub set_property_action: Option<Box<models::AlterTransactionSetProperty>>,
    #[serde(rename = "unsetPropertyAction", skip_serializing_if = "Option::is_none")]
    pub unset_property_action: Option<Box<models::AlterTransactionUnsetProperty>>,
}

impl AlterTransactionAction {
    /// A single action that could be performed to alter a transaction. This action holds the model definition for all types of specific actions models, this is to minimize difference and compatibility issue across codegen in different languages. When used, only one of the actions should be non-null for each action. If you would like to perform multiple actions, set a list of actions in the AlterTransactionRequest. 
    pub fn new() -> AlterTransactionAction {
        AlterTransactionAction {
            set_status_action: None,
            set_property_action: None,
            unset_property_action: None,
        }
    }
}

