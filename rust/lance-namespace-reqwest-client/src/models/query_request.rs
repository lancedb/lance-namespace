/*
 * Lance REST Namespace Specification
 *
 * **Lance Namespace Specification** is an open specification on top of the storage-based Lance data format  to standardize access to a collection of Lance tables (a.k.a. Lance datasets). It describes how a metadata service like Apache Hive MetaStore (HMS), Apache Gravitino, Unity Catalog, etc. should store and use Lance tables, as well as how ML/AI tools and analytics compute engines (will together be called _\"tools\"_ in this document) should integrate with Lance tables. A Lance namespace is a centralized repository for discovering, organizing, and managing Lance tables. It can either contain a collection of tables, or a collection of Lance namespaces recursively. It is designed to encapsulates concepts including namespace, metastore, database, schema, etc. that frequently appear in other similar data systems to allow easy integration with any system of any type of object hierarchy. In an enterprise environment, typically there is a requirement to store tables in a metadata service  for more advanced governance features around access control, auditing, lineage tracking, etc. **Lance REST Namespace** is an OpenAPI protocol that enables reading, writing and managing Lance tables by connecting those metadata services or building a custom metadata server in a standardized way. 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct QueryRequest {
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "namespace")]
    pub namespace: Vec<String>,
    /// Query vector for similarity search
    #[serde(rename = "vector")]
    pub vector: Vec<f32>,
    /// Number of results to return
    #[serde(rename = "k")]
    pub k: i32,
    /// Optional SQL filter expression
    #[serde(rename = "filter", skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    /// Optional list of columns to return
    #[serde(rename = "columns", skip_serializing_if = "Option::is_none")]
    pub columns: Option<Vec<String>>,
    /// Distance metric to use
    #[serde(rename = "distance_type", skip_serializing_if = "Option::is_none")]
    pub distance_type: Option<DistanceType>,
    /// Whether to apply filtering before vector search
    #[serde(rename = "prefilter", skip_serializing_if = "Option::is_none")]
    pub prefilter: Option<bool>,
    /// Whether to bypass vector index
    #[serde(rename = "bypass_vector_index", skip_serializing_if = "Option::is_none")]
    pub bypass_vector_index: Option<bool>,
    /// Search effort parameter for HNSW index
    #[serde(rename = "ef", skip_serializing_if = "Option::is_none")]
    pub ef: Option<i32>,
    /// Number of probes for IVF index
    #[serde(rename = "nprobes", skip_serializing_if = "Option::is_none")]
    pub nprobes: Option<i32>,
    /// Refine factor for search
    #[serde(rename = "refine_factor", skip_serializing_if = "Option::is_none")]
    pub refine_factor: Option<i32>,
    /// Whether to include row ID in results
    #[serde(rename = "with_row_id", skip_serializing_if = "Option::is_none")]
    pub with_row_id: Option<bool>,
    /// Number of results to skip
    #[serde(rename = "offset", skip_serializing_if = "Option::is_none")]
    pub offset: Option<i32>,
    /// Table version to query
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<i64>,
}

impl QueryRequest {
    pub fn new(name: String, namespace: Vec<String>, vector: Vec<f32>, k: i32) -> QueryRequest {
        QueryRequest {
            name,
            namespace,
            vector,
            k,
            filter: None,
            columns: None,
            distance_type: None,
            prefilter: None,
            bypass_vector_index: None,
            ef: None,
            nprobes: None,
            refine_factor: None,
            with_row_id: None,
            offset: None,
            version: None,
        }
    }
}
/// Distance metric to use
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DistanceType {
    #[serde(rename = "l2")]
    L2,
    #[serde(rename = "cosine")]
    Cosine,
    #[serde(rename = "dot")]
    Dot,
}

impl Default for DistanceType {
    fn default() -> DistanceType {
        Self::L2
    }
}

