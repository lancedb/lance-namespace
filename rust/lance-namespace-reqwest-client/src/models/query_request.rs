/*
 * Lance REST Namespace Specification
 *
 * This OpenAPI specification is a part of the Lance namespace specification. It contains 2 parts: The `components/schemas`, `components/responses`, `components/examples` sections define the request and response shape for each operation in a Lance Namespace across all implementations. See https://lancedb.github.io/lance-namespace/spec/operations for more details. The `servers`, `security`, `paths`, `components/parameters` sections are for the  Lance REST Namespace implementation, which defines a complete REST server that can work with Lance datasets. See https://lancedb.github.io/lance-namespace/spec/impls/rest for more details. 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct QueryRequest {
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "namespace")]
    pub namespace: Vec<String>,
    /// Whether to bypass vector index
    #[serde(rename = "bypass_vector_index", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub bypass_vector_index: Option<Option<bool>>,
    /// Optional list of columns to return
    #[serde(rename = "columns", skip_serializing_if = "Option::is_none")]
    pub columns: Option<Vec<String>>,
    /// Distance metric to use
    #[serde(rename = "distance_type", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub distance_type: Option<Option<String>>,
    /// Search effort parameter for HNSW index
    #[serde(rename = "ef", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ef: Option<Option<i32>>,
    /// Whether to use fast search
    #[serde(rename = "fast_search", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub fast_search: Option<Option<bool>>,
    /// Optional SQL filter expression
    #[serde(rename = "filter", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub filter: Option<Option<String>>,
    /// Optional full-text search query (only string query supported)
    #[serde(rename = "full_text_query", skip_serializing_if = "Option::is_none")]
    pub full_text_query: Option<Box<models::StringFtsQuery>>,
    /// Number of results to return
    #[serde(rename = "k")]
    pub k: i32,
    /// Lower bound for search
    #[serde(rename = "lower_bound", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub lower_bound: Option<Option<f32>>,
    /// Number of probes for IVF index
    #[serde(rename = "nprobes", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub nprobes: Option<Option<i32>>,
    /// Number of results to skip
    #[serde(rename = "offset", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub offset: Option<Option<i32>>,
    /// Whether to apply filtering before vector search
    #[serde(rename = "prefilter", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub prefilter: Option<Option<bool>>,
    /// Refine factor for search
    #[serde(rename = "refine_factor", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub refine_factor: Option<Option<i32>>,
    /// Upper bound for search
    #[serde(rename = "upper_bound", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub upper_bound: Option<Option<f32>>,
    /// Query vector for similarity search (single vector only)
    #[serde(rename = "vector")]
    pub vector: Vec<f32>,
    /// Name of the vector column to search
    #[serde(rename = "vector_column", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub vector_column: Option<Option<String>>,
    /// Table version to query
    #[serde(rename = "version", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub version: Option<Option<i64>>,
    /// If true, return the row id as a column called `_rowid`
    #[serde(rename = "with_row_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub with_row_id: Option<Option<bool>>,
}

impl QueryRequest {
    pub fn new(name: String, namespace: Vec<String>, k: i32, vector: Vec<f32>) -> QueryRequest {
        QueryRequest {
            name,
            namespace,
            bypass_vector_index: None,
            columns: None,
            distance_type: None,
            ef: None,
            fast_search: None,
            filter: None,
            full_text_query: None,
            k,
            lower_bound: None,
            nprobes: None,
            offset: None,
            prefilter: None,
            refine_factor: None,
            upper_bound: None,
            vector,
            vector_column: None,
            version: None,
            with_row_id: None,
        }
    }
}

