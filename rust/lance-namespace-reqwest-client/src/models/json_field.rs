/*
 * Lance Namespace Specification
 *
 * This OpenAPI specification is a part of the Lance namespace specification. It contains 2 parts:  The `components/schemas`, `components/responses`, `components/examples`, `tags` sections define the request and response shape for each operation in a Lance Namespace across all implementations. See https://lancedb.github.io/lance-namespace/spec/operations for more details.  The `servers`, `security`, `paths`, `components/parameters` sections are for the  Lance REST Namespace implementation, which defines a complete REST server that can work with Lance datasets. See https://lancedb.github.io/lance-namespace/spec/impls/rest for more details. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// JsonField : JSON representation of an Apache Arrow [Field].
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct JsonField {
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<std::collections::HashMap<String, String>>,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "nullable")]
    pub nullable: bool,
    #[serde(rename = "type")]
    pub r#type: Box<models::JsonDataType>,
}

impl JsonField {
    /// JSON representation of an Apache Arrow [Field].
    pub fn new(name: String, nullable: bool, r#type: models::JsonDataType) -> JsonField {
        JsonField {
            metadata: None,
            name,
            nullable,
            r#type: Box::new(r#type),
        }
    }
}

