/*
 * Lance Namespace Specification
 *
 * This OpenAPI specification is a part of the Lance namespace specification. It contains 2 parts:  The `components/schemas`, `components/responses`, `components/examples`, `tags` sections define the request and response shape for each operation in a Lance Namespace across all implementations. See https://lancedb.github.io/lance-namespace/spec/operations for more details.  The `servers`, `security`, `paths`, `components/parameters` sections are for the  Lance REST Namespace implementation, which defines a complete REST server that can work with Lance datasets. See https://lancedb.github.io/lance-namespace/spec/impls/rest for more details. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MatchQuery {
    #[serde(rename = "boost", skip_serializing_if = "Option::is_none")]
    pub boost: Option<f32>,
    #[serde(rename = "column")]
    pub column: String,
    #[serde(rename = "fuzziness", skip_serializing_if = "Option::is_none")]
    pub fuzziness: Option<i32>,
    /// The maximum number of terms to expand for fuzzy matching. Default to 50.
    #[serde(rename = "max_expansions", skip_serializing_if = "Option::is_none")]
    pub max_expansions: Option<i32>,
    /// The operator to use for combining terms. This can be either `And` or `Or`, it's 'Or' by default. - `And`: All terms must match. - `Or`: At least one term must match.
    #[serde(rename = "operator", skip_serializing_if = "Option::is_none")]
    pub operator: Option<models::Operator>,
    /// The number of beginning characters being unchanged for fuzzy matching. Default to 0.
    #[serde(rename = "prefix_length", skip_serializing_if = "Option::is_none")]
    pub prefix_length: Option<i32>,
    #[serde(rename = "terms")]
    pub terms: String,
}

impl MatchQuery {
    pub fn new(column: String, terms: String) -> MatchQuery {
        MatchQuery {
            boost: None,
            column,
            fuzziness: None,
            max_expansions: None,
            operator: None,
            prefix_length: None,
            terms,
        }
    }
}

