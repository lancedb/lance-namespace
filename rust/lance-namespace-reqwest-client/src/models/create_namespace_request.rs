/*
 * Lance REST Namespace Specification
 *
 * This OpenAPI specification is a part of the Lance namespace specification. It contains 2 parts: The `components/schemas`, `components/responses`, `components/examples` sections define the request and response shape for each operation in a Lance Namespace across all implementations. See https://lancedb.github.io/lance-namespace/spec/operations for more details. The `servers`, `security`, `paths`, `components/parameters` sections are for the  Lance REST Namespace implementation, which defines a complete REST server that can work with Lance datasets. See https://lancedb.github.io/lance-namespace/spec/impls/rest for more details. 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateNamespaceRequest {
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "parent", skip_serializing_if = "Option::is_none")]
    pub parent: Option<Vec<String>>,
    #[serde(rename = "mode")]
    pub mode: Mode,
    #[serde(rename = "options", skip_serializing_if = "Option::is_none")]
    pub options: Option<std::collections::HashMap<String, String>>,
}

impl CreateNamespaceRequest {
    pub fn new(name: String, mode: Mode) -> CreateNamespaceRequest {
        CreateNamespaceRequest {
            name,
            parent: None,
            mode,
            options: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Mode {
    #[serde(rename = "CREATE")]
    Create,
    #[serde(rename = "EXIST_OK")]
    ExistOk,
    #[serde(rename = "OVERWRITE")]
    Overwrite,
}

impl Default for Mode {
    fn default() -> Mode {
        Self::Create
    }
}

